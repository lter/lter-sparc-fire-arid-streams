---
format: gfm
engine: knitr
---

# nitrate

## view: combined nitrate

Create a view of standardized (forms, units) nitrate that reflects data from
from both the USGS and non-USGS data sources.

Convert NEON and SBC data (micromoles) to `mg NO3-N / L`.

```{sql}
#| eval: FALSE

DROP VIEW IF EXISTS firearea.nitrate ;

CREATE VIEW firearea.nitrate AS 
SELECT
  usgs_site,
  "ActivityStartDate" AS date,
  'nitrate' as analyte,
  AVG (value_std) AS value_std,
  'mg/L as N' AS units_std
FROM firearea.usgs_water_chem_std
WHERE
  "USGSPCode" IN (
    '00618',
    '00631'
  )
GROUP BY
  usgs_site,
  date
UNION
SELECT
  usgs_site,
  date,
  analyte,
  CASE
    WHEN unit ~~* 'micromoles%' THEN mean * (14.0 / 1000.0)
    WHEN unit ~~* '%uM%' THEN mean * (14.0 / 1000.0) 
    ELSE mean
  END value_std,
  CASE
    WHEN unit ~~* 'micromoles%' THEN 'mg/L as N'
    WHEN unit ~~* '%uM%' THEN 'mg/L as N' 
    ELSE unit
  END units_std
FROM firearea.non_usgs_water_chem
WHERE
(
  analyte ~~* '%nitrate%' OR
  analyte ~~* '%no3%'
) AND
  usgs_site !~~* '%bell%'
;

```


## view: nitrate_ranges (unused)

Generate a view of summary statistics surrounding nitrate data availability
(number of samples pre, post fire; time (days) since previous fire; etc.).

The `chem_ranges` CTE uses the template detailed in `chemistry with ranges`.

The `num_pre_fire` and `num_post_fire` reflect the number of nitrate
observations in the period between the fire of interest and the previous and
next fires, respectively; not to be confused with the number of observations at
any point prior to and after the fire of interest, respectively.

The number of nitrate observations reflects observations for which there is
also a discharge measurement.

This query is likely not to be employed as the project has decided to use
aggregated fires in the fire season (this query addressed only unaggregated
data) but I think there are some errors here so it should be evaluated before a
possible future use.

```{sql}
#| eval: FALSE

DROP VIEW IF EXISTS firearea.nitrate_ranges ;

CREATE VIEW firearea.nitrate_ranges AS 
WITH chem_ranges AS (
  SELECT
    nitrate.usgs_site,
    nitrate.date,
    nitrate.value_std,
    ranges.event AS pre,
    ranges_post.post
  FROM firearea.nitrate
  JOIN firearea.discharge ON (
    discharge."Date" = nitrate.date
    AND discharge.usgs_site = nitrate.usgs_site
  )
  LEFT JOIN firearea.ranges ON (
    nitrate.usgs_site = ranges.usgs_site
    -- AND daterange(nitrate.date, nitrate.date, '[]') && ranges.pre
    AND ranges.pre @> nitrate.date
  )
  LEFT JOIN (
    SELECT
      nitrate.usgs_site,
      nitrate.date,
      ranges.event AS post
    FROM firearea.nitrate 
    LEFT JOIN firearea.ranges ON (
      nitrate.usgs_site = ranges.usgs_site
      -- AND daterange(nitrate.date, nitrate.date, '[]') && ranges.post
      AND ranges.post @> nitrate.date
    )
  ) AS ranges_post ON (
    ranges_post.usgs_site = nitrate.usgs_site
    AND ranges_post.date = nitrate.date
  )
  ORDER BY
    nitrate.usgs_site,
    nitrate.date
)
SELECT
  pre_fire.usgs_site,
  pre_fire.pre AS event,
  adjacent_fire.date,
  adjacent_fire.days_since_prior_fire,
  pre_fire.num_pre_fire,
  post_fire.num_post_fire
FROM (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.pre,
    count(chem_ranges.pre) AS num_pre_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.pre
) AS pre_fire
JOIN (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.post,
    count(chem_ranges.post) AS num_post_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.post
) AS post_fire ON (
    post_fire.usgs_site = pre_fire.usgs_site
    AND post_fire.post  = pre_fire.pre
)
LEFT JOIN (
  SELECT
    usgs_site,
    date,
    event,
    UPPER(ranges.pre) - LOWER(ranges.pre) AS days_since_prior_fire
  FROM firearea.ranges
) AS adjacent_fire ON (
    adjacent_fire.usgs_site = pre_fire.usgs_site
    AND adjacent_fire.event = pre_fire.pre
)
;

```


## view: analyte_counts (summer)

```{sql}
#| eval: FALSE

SELECT firearea.create_analyte_counts_view('nitrate');

```


## m.view: largest fire

```{sql}
#| eval: FALSE

SELECT firearea.create_largest_analyte_valid_fire_per_site_mv('nitrate');
-- REFRESH MATERIALIZED VIEW firearea.largest_nitrate_valid_fire_per_site ;

```


## export: summary all sites

See full metadata [here]. Basically, though, catchment and summary statistics for
all sites associated with this analyte.

```{sql}
#| eval: FALSE

SELECT firearea.export_analyte_summary_all_sites('nitrate');

```


## export: summary largest fire sites

See full metadata [here]. Basically, though, catchment and summary statistics
for all sites associated with this analyte for the largest fire.

```{sql}
#| eval: FALSE

SELECT firearea.export_analyte_largest_fire_sites('nitrate'::TEXT);

```


## export: q+c all

All analyte + discharge observations. Used for testing but not analyses.

```{sql}
#| eval: FALSE

\COPY (
SELECT
  nitrate.*,
  discharge."Flow",
  discharge.quartile
FROM firearea.nitrate
JOIN firearea.discharge ON (
  discharge."Date" = nitrate.date
  AND discharge.usgs_site = nitrate.usgs_site
)
ORDER BY
  nitrate.usgs_site,
  nitrate.date
) TO '/tmp/nitrate_q_chem.csv' WITH CSV HEADER
;

```


## export: q+c pre-post-quartiles

synopsis:

This function generates a query (`{analyte}_q_upper_quartiles`) that extracts
paired analyte and discharge observations from USGS and non-USGS monitoring
sites focusing on the periods before and after fire.

For each site/fire window, requires:
  - analyte–discharge observations in both the 3-year pre- and post-fire
  windows
  - analyte–discharge observations must include flow quartiles 2, 3, and 4 in
  both windows

Full metadata [here].

The query result is saved as: `{analyte}_discharge_data_filtered_quartiles_234.csv`

```{sql}
#| eval: FALSE

SELECT firearea.export_analyte_q_pre_post_quartiles('nitrate'::TEXT);

```


## export: q+c pre-post-quartiles largest fire

purpose:

This query extracts analyte and discharge observations from USGS watershed sites
surrounding wildfires. It isolates data for only the largest valid fire per
watershed, where validity is defined by the presence of adequate water quality
monitoring data before and after the fire.

filtering:

- Limit analysis to only the most impactful fire per watershed, based on fire
  area (`cum_fire_area`).
- ensure fire events are sufficiently monitored, with:
  - At least 3 years of data before and after the fire.
  - Presence of streamflow across flow quartiles 2, 3, and 4 in both windows.

The query result is saved as: `{analyte}_discharge_quartiles_234_max_fire.csv`

```{sql}
#| eval: FALSE

SELECT firearea.export_analyte_q_pre_post_quartiles_largest_fire('nitrate'::TEXT);

```


## export: q+c pre-quartiles largest fire

purpose:

This query retrieves nitrate and discharge records for USGS watershed sites
(`usgs_site`) surrounding wildfires. It ensures strong sampling coverage before
the fire, requiring observations in flow quartiles 2, 3, and 4, while placing no
constraint on post-fire sampling coverage.

The query result is saved as: `{analyte}_discharge_before_quartiles_234_max_fire.csv`

```{sql}
#| eval: FALSE

SELECT firearea.export_analyte_q_pre_quartiles_largest_fire('nitrate'::TEXT);

```
