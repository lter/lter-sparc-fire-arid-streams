---
title: "wildfire database data summary queries"
author: "S. Earl"
format: gfm
---

# overview

Queries for transforming (as needed) and extracting wildfire data.

Queries generate either a view, temporary table, or export. Views should be
reconstructed as needed based on database updates; of course, temporary tables
must be constructed prior to each new export. One additional query is partial,
which is a template for a CTE in subsequent queries.


# view: USGS water chemistry

Generate a view of a standardized form of the USGS water-chemistry data that
will provide a starting point for generating summaries of particular analytes.

```{sql}
#| eval: TRUE

DROP VIEW IF EXISTS firearea.usgs_water_chem_std ;

CREATE VIEW firearea.usgs_water_chem_std AS
SELECT
  *,
  CASE
    WHEN "USGSPCode" = '71851' THEN "ResultMeasureValue" * (14.0/62.0) -- no3_d
    WHEN "USGSPCode" = '71856' THEN "ResultMeasureValue" * (14.0/46.0) -- no2_d
    WHEN "USGSPCode" = '71846' THEN "ResultMeasureValue" * (14.0/18.0) -- nh4_d
    WHEN "USGSPCode" = '71845' THEN "ResultMeasureValue" * (14.0/18.0) -- nh4_t
    ELSE "ResultMeasureValue"
  END value_std,
  CASE
    WHEN "USGSPCode" = '71851' THEN 'mg/l as N'
    WHEN "USGSPCode" = '71856' THEN 'mg/l as N'
    WHEN "USGSPCode" = '71846' THEN 'mg/l as N'
    WHEN "USGSPCode" = '71845' THEN 'mg/l as N'
    ELSE "ResultMeasure.MeasureUnitCode"
  END units_std,
  CASE
    WHEN "USGSPCode" = '71851' THEN '00618'
    WHEN "USGSPCode" = '71856' THEN '00613'
    WHEN "USGSPCode" = '71846' THEN '00608'
    WHEN "USGSPCode" = '71845' THEN '00610'
    WHEN "USGSPCode" = '90095' THEN '00095' -- sp cond
    ELSE "USGSPCode"
  END usgspcode_std
FROM firearea.water_chem
WHERE
  "ActivityMediaName" ~~* 'Water' AND             -- water samples only
  "ActivityMediaSubdivisionName" ~* 'Surface' AND -- surface water only
  "ActivityTypeCode" !~* 'quality' AND            -- omit QC (blanks, spikes, etc.)
  -- omit bed sediments and null values
  "ResultSampleFractionText" IN (
    'Dissolved',
    'Non-filterable',
    'Recoverable',
    'Suspended',
    'Total'
    ) AND
  "USGSPCode" NOT IN (
    '00402', -- spcond not at 25 c
    -- '91003', -- nitrate ug/L n=1
    '00070'  -- turbidity as JTU
  ) AND
  "HydrologicEvent" IN (
    'Affected by fire',
    'Backwater',
    -- 'Dambreak',
    'Drought',
    -- 'Earthquake',
    'Flood',
    -- 'Hurricane',
    -- 'Mudflow',
    'Not applicable',
    'Not Determined (historical)',
    'Regulated flow',
    'Routine sample',
    'Snowmelt',
    -- 'Spill',
    'Spring breakup' --,
    -- 'Storm',
    -- 'Under ice cover',
    -- 'Volcanic action'
  ) AND
  usgs_site IN (
    SELECT usgs_site FROM firearea.ecoregion_catchments
  )
;

```

# table: combined discharge

A view of discharge that reflects the combined records of data from USGS and
otherwise sites.

```{sql}
#| eval: TRUE

DROP TABLE IF EXISTS firearea.discharge ;

CREATE TABLE firearea.discharge AS
SELECT
  discharge_daily.usgs_site,
  discharge_daily."Date",
  discharge_daily."Flow",
  discharge_daily."Flow_cd"
FROM firearea.discharge_daily
WHERE
  discharge_daily."Flow" >= 0
  AND discharge_daily.usgs_site IN (
    SELECT DISTINCT(usgs_site)
    FROM firearea.ecoregion_catchments
  )
UNION
SELECT
  non_usgs_discharge.usgs_site,
  non_usgs_discharge.date AS "Date",
  non_usgs_discharge.mean AS "Flow",
  NULL AS "Flow_cd"
FROM firearea.non_usgs_discharge
WHERE
  non_usgs_discharge.mean >= 0
;

-- Step 1: add quartile column
ALTER TABLE firearea.discharge
  ADD COLUMN quartile INTEGER ;

CREATE OR REPLACE PROCEDURE firearea.update_discharge_quartiles()
LANGUAGE plpgsql
AS $$
BEGIN
-- Step 2: Calculate percentiles
WITH percentiles AS (
    SELECT
        usgs_site,
        percentile_disc(0.25) WITHIN GROUP (ORDER BY "Flow") AS p25,
        percentile_disc(0.50) WITHIN GROUP (ORDER BY "Flow") AS p50,
        percentile_disc(0.75) WITHIN GROUP (ORDER BY "Flow") AS p75
    FROM
        firearea.discharge
    GROUP BY
        usgs_site
),
-- Step 3: Assign quartiles
quartiles AS (
    SELECT
        d.usgs_site,
        d."Flow",
        CASE
            WHEN d."Flow" <= p.p25 THEN 1
            WHEN d."Flow" <= p.p50 THEN 2
            WHEN d."Flow" <= p.p75 THEN 3
            ELSE 4
        END AS quartile
    FROM
        firearea.discharge d
    JOIN
        percentiles p ON d.usgs_site = p.usgs_site
)
-- Step 4: Update the table
UPDATE firearea.discharge
SET quartile = q.quartile
FROM quartiles q
WHERE
    firearea.discharge.usgs_site = q.usgs_site
    AND firearea.discharge."Flow" = q."Flow"
  ;
-- If everything runs successfully, commit automatically
EXCEPTION
  WHEN OTHERS THEN
    -- Rollback the transaction in case of failure
    RAISE NOTICE 'Transaction failed. Rolling back changes.';
    ROLLBACK;
END $$;


CALL firearea.update_discharge_quartiles();

```

# view: ranges (intervals between fires)

## individual fires

A view of the interval (`daterange`) between sites * fires. This view allows us
to identify the timing of a separate event (water chemistry sample, discharge
value, etc.) relative to a fire within the catchment. Intervals reflect the
temporal period between a fire and the most recent fire (pre) and the next
occurring fire (post) within that catchment.

A note about quality: the construction of this table, and if and how it affects
subsequent queries in terms of inclusivity has not been evaluated thoroughly.
That is, for example, how a water-chemistry sample is categorized (pre, post)
if it were to fall on the day of the fire has not been tested.

```{sql}
#| eval: FALSE
#| label: ranges

DROP VIEW IF EXISTS firearea.ranges ;

CREATE VIEW firearea.ranges AS 
WITH RECURSIVE
pre_fire_cte AS (
  SELECT 
    pre_fire.usgs_site,
    pre_fire.date,
    UNNEST(pre_fire.event) AS event,
    pre_fire.pre
  FROM (
    SELECT
      pre_array.usgs_site,
      pre_array.ig_date AS date,
      pre_array.event_id AS event,
      DATERANGE(
        LAG(pre_array.ig_date, 1) OVER (
          PARTITION BY pre_array.usgs_site
          ORDER BY pre_array.ig_date
        ),
        pre_array.ig_date
      ) AS pre
    FROM (
      SELECT
        usgs_site,
        ig_date,
        ARRAY_AGG(event_id) AS event_id
      FROM firearea.fires_catchments 
      GROUP BY
        usgs_site,
        ig_date
      ORDER BY
        ig_date
    ) AS pre_array
    ORDER BY
      pre_array.usgs_site,
      pre_array.ig_date
  ) AS pre_fire
  WHERE pre_fire.pre != 'empty'
),
post_fire_cte AS (
  SELECT 
    post_fire.usgs_site,
    post_fire.date,
    UNNEST(post_fire.event) AS event,
    post_fire.post
  FROM (
    SELECT
      post_array.usgs_site,
      post_array.ig_date AS date,
      post_array.event_id AS event,
      DATERANGE(
        post_array.ig_date,
        LEAD(post_array.ig_date, 1) OVER (
          PARTITION BY post_array.usgs_site
          ORDER BY post_array.ig_date
        )
      ) AS post
    FROM (
      SELECT
        usgs_site,
        ig_date,
        ARRAY_AGG(event_id) AS event_id
      FROM firearea.fires_catchments 
      GROUP BY
        usgs_site,
        ig_date
      ORDER BY
        ig_date
    ) AS post_array
    ORDER BY
      post_array.usgs_site,
      post_array.ig_date
  ) AS post_fire
  WHERE post_fire.post != 'empty'
)
SELECT
  pre_fire_cte.usgs_site,
  pre_fire_cte.date,
  pre_fire_cte.event,
  pre_fire_cte.pre,
  post_fire_cte.post
FROM pre_fire_cte
JOIN post_fire_cte ON (
  pre_fire_cte.usgs_site = post_fire_cte.usgs_site
  AND pre_fire_cte.date  = post_fire_cte.date
  AND pre_fire_cte.event = post_fire_cte.event
)
;

```

## summer fires

Whereas the [## individual fires] ranges calculates range statistics based on
all site and all fires, [## summer fires] addresses some pre-processing and
calculates range statistics separately on summer and non-summer fires.
Pre-processing includes filtering fires smaller than a certain percent of the
catchment burned (0.00). Summer fires are defined as fires occurring DOY 110
through 250. For summer fires, the interval between the previous fire and
latest fire are from the earliest fire in the summer period and latest fire in
the summer period.

A view of the interval (`daterange`) between sites * fires. This view allows us
to identify the timing of a separate event (water chemistry sample, discharge
value, etc.) relative to a fire within the catchment. Intervals reflect the
temporal period between a fire and the most recent fire (pre) and the next
occurring fire (post) within that catchment.

A note about quality: the construction of this table, and if and how it affects
subsequent queries in terms of inclusivity has not been evaluated thoroughly.
That is, for example, how a water-chemistry sample is categorized (pre, post)
if it were to fall on the day of the fire has not been tested.

```{sql}
#| eval: TRUE
#| label: ranges_agg

DROP VIEW IF EXISTS firearea.ranges_agg CASCADE ;

CREATE VIEW firearea.ranges_agg AS 
-- merges usgs and non-usgs catchments
WITH combined_catchments AS (
SELECT
  usgs_site,
  geometry
FROM firearea.catchments
WHERE
usgs_site IN (
    SELECT DISTINCT(usgs_site)
    FROM firearea.ecoregion_catchments
)
UNION 
SELECT
  usgs_site,
  geometry
FROM firearea.non_usgs_catchments
),
-- calculates areal stats and filters small fires
fires_filtered AS (
  SELECT
    areas_stats.*
  FROM (
    SELECT
      areas.usgs_site,
      areas.event_id,
      mtbs_fire_perimeters.ig_date,
      ROUND((mtbs_fire_perimeters.burnbndac / 247.11)::numeric, 2) AS fire_area,
      areas.catch_area,
      areas.fire_catch_area,
      ROUND(((areas.fire_catch_area / areas.catch_area) * 100)::numeric, 2) AS per_cent_burned
    FROM
    (
      SELECT
        fires_catchments.usgs_site,
        fires_catchments.event_id,
        fires_catchments.ig_date,
        ROUND((ST_Area(fires_catchments.geometry, TRUE) / 1000000)::numeric, 2) AS fire_catch_area,
        ROUND((ST_Area(combined_catchments.geometry, TRUE) / 1000000)::numeric, 2) AS catch_area
      FROM
        firearea.fires_catchments
      JOIN
        combined_catchments ON (combined_catchments.usgs_site = fires_catchments.usgs_site)
    ) AS areas
    JOIN
      firearea.mtbs_fire_perimeters ON (mtbs_fire_perimeters.event_id = areas.event_id)
  ) AS areas_stats
-- filtering by > 0.00 drops the count from 12782 to 11207
-- WHERE areas_stats.per_cent_burned > 0.00
),
-- aggregates events and cumulative burned area for all summer fires and
-- non-summer fires with more than one event per day per catchment;
-- summer fires are unioned to non-summer fires
grouped_fires AS (
  SELECT 
    usgs_site, 
    EXTRACT(YEAR FROM ig_date) AS year,
    MIN(ig_date) AS start_date,
    MAX(ig_date) AS end_date,
    ARRAY_AGG(DISTINCT event_id) AS events,
    SUM(fire_catch_area) AS cum_fire_area
  FROM 
    fires_filtered
  WHERE
    EXTRACT(DOY FROM ig_date) BETWEEN 110 AND 250
  GROUP BY 
    fires_filtered.usgs_site,
    year
  UNION
  -- account for occurrences of multiple fires per day at a site
  SELECT
    usgs_site,
    EXTRACT(YEAR FROM ig_date) AS year,
    ig_date AS start_date,
    ig_date AS end_date,
    ARRAY_AGG(DISTINCT event_id) AS events,
    SUM(fire_catch_area) AS cum_fire_area 
  FROM 
    fires_filtered
  WHERE 
    EXTRACT(DOY FROM ig_date) < 110
    OR EXTRACT(DOY FROM ig_date) > 250
  GROUP BY
    usgs_site,
    ig_date
),
-- identifies date since last and date until next fire
grouped_fires_ranges AS (
  SELECT
    grouped_fires.usgs_site,
    grouped_fires.year,
    start_date,
    end_date,
    LAG(grouped_fires.end_date, 1) OVER (
      PARTITION BY grouped_fires.usgs_site
      ORDER BY grouped_fires.end_date
    ) AS previous_end_date,
    LEAD(grouped_fires.start_date, 1) OVER (
      PARTITION BY grouped_fires.usgs_site
      ORDER BY grouped_fires.start_date
    ) AS next_start_date,
    events,
    cum_fire_area
  FROM grouped_fires
  ORDER BY
    grouped_fires.usgs_site,
    grouped_fires.start_date
),
-- calculates days since last and days until next fire
grouped_fires_days AS (
  SELECT
    usgs_site,
    year,
    start_date,
    end_date,
    previous_end_date,
    next_start_date,
    CASE
        WHEN previous_end_date IS NOT NULL
        THEN start_date - previous_end_date
        ELSE NULL
    END AS days_since,
    CASE
        WHEN next_start_date IS NOT NULL
        THEN next_start_date - end_date
        ELSE NULL
    END AS days_until,
    events,
    cum_fire_area
  FROM grouped_fires_ranges
)
-- calculates cumulative burned area as a percentage of catchment area
SELECT
  grouped_fires_days.usgs_site,
  grouped_fires_days.year,
  grouped_fires_days.start_date,
  grouped_fires_days.end_date,
  grouped_fires_days.previous_end_date,
  grouped_fires_days.next_start_date,
  grouped_fires_days.days_since,
  grouped_fires_days.days_until,
  grouped_fires_days.events,
  grouped_fires_days.cum_fire_area,
  areas.catch_area,
  ROUND(((grouped_fires_days.cum_fire_area / areas.catch_area) * 100)::numeric, 2) AS cum_per_cent_burned,
  areas.latitude,
  areas.longitude
FROM
  grouped_fires_days
JOIN
(
  SELECT
    combined_catchments.usgs_site,
    ROUND((ST_Area(combined_catchments.geometry, TRUE) / 1000000)::numeric, 2) AS catch_area,
    ST_Y(ST_Centroid(ST_Transform(geometry, 4326))) AS latitude,
    ST_X(ST_Centroid(ST_Transform(geometry, 4326))) AS longitude
  FROM
  combined_catchments
) AS areas ON (areas.usgs_site = grouped_fires_days.usgs_site)
;

```

# partial: combined catchments

`partial` indicates a block of code that is a component of a larger block but
highlighted also as a separate chunk for adapting to other contexts.

```{sql}
#| eval: TRUE
#| label: combined_catchments

SELECT
  usgs_site,
  -- area_m2,
  -- ST_Area(geometry, TRUE) AS area_m2
  geometry
FROM firearea.catchments
UNION 
SELECT
  usgs_site,
  -- area_m2,
  -- ST_Area(geometry, TRUE) AS area_m2
  geometry
FROM firearea.non_usgs_catchments
;

```

# temp: discharge and areal statistics

A temporary table that calculates statistics around discharge, and catchment
and fire areas.

```{sql}
#| eval: TRUE
#| label: dd_area_stats

DROP VIEW IF EXISTS firearea.dd_area_stats ;

CREATE VIEW firearea.dd_area_stats AS 
WITH combined_catchments AS (
SELECT
  usgs_site,
  geometry
FROM firearea.catchments
UNION 
SELECT
  usgs_site,
  geometry
FROM firearea.non_usgs_catchments
)
SELECT
  dd_stats.*,
  area_stats.fire_area,
  area_stats.catch_area,
  area_stats.fire_catch_area,
  area_stats.per_cent_burned
FROM (
  SELECT
    fire_catchment_dates.usgs_site,
    fire_catchment_dates.event_id,
    fire_catchment_dates.ignition_date,
    discharge_daily_statistics.min_date_q,
    discharge_daily_statistics.max_date_q,
    fire_catchment_dates.ignition_date - discharge_daily_statistics.min_date_q AS days_q_pre_fire,
    discharge_daily_statistics.max_date_q - fire_catchment_dates.ignition_date AS days_q_post_fire,
    discharge_daily_statistics.records_q
  FROM
  (
    SELECT
      usgs_site,
      min("Date") AS min_date_q,
      max("Date") AS max_date_q,
      count("Flow_cd") AS records_q
    FROM firearea.discharge
    GROUP BY
    usgs_site
  ) AS discharge_daily_statistics
  JOIN
  (
    SELECT
      fires_catchments.usgs_site,
      fires_catchments.event_id,
      mtbs_fire_perimeters.ig_date AS ignition_date
    FROM
    firearea.fires_catchments
    JOIN
    firearea.mtbs_fire_perimeters ON (mtbs_fire_perimeters.event_id = fires_catchments.event_id)
  ) AS fire_catchment_dates
  ON (fire_catchment_dates.usgs_site = discharge_daily_statistics.usgs_site)
) AS dd_stats
JOIN
(
  SELECT
    areas.usgs_site,
    areas.event_id,
    ROUND((burnbndac / 247.11)::numeric, 2) AS fire_area,
    areas.catch_area,
    areas.fire_catch_area,
    ROUND(((areas.fire_catch_area / areas.catch_area) * 100)::numeric, 2) AS per_cent_burned
  FROM
  (
    SELECT
      fires_catchments.usgs_site,
      fires_catchments.event_id,
      fires_catchments.ig_date,
      ROUND((ST_Area(fires_catchments.geometry, TRUE) / 1000000)::numeric, 2) AS fire_catch_area,
      ROUND((ST_Area(combined_catchments.geometry, TRUE) / 1000000)::numeric, 2) AS catch_area
    FROM
    firearea.fires_catchments
    JOIN
    combined_catchments ON (combined_catchments.usgs_site = fires_catchments.usgs_site)
  ) AS areas
  JOIN
  firearea.mtbs_fire_perimeters ON (mtbs_fire_perimeters.event_id = areas.event_id)
) AS area_stats ON (
area_stats.usgs_site = dd_stats.usgs_site
AND area_stats.event_id = dd_stats.event_id
)
WHERE
  dd_stats.days_q_pre_fire >= 0 AND dd_stats.days_q_post_fire >= 0 AND -- any duration
  dd_stats.usgs_site IN (
    SELECT usgs_site FROM firearea.ecoregion_catchments
  )
ORDER BY
  dd_stats.usgs_site,
  dd_stats.event_id
;

```

# partial: chemistry with ranges

Designate water-chemistry measurements relative to fires (pre, post). This is a
template, the example here being for standardized nitrate data, that forms the
chem_ranges CTE of the data summary for a given analyte. This template must be
modified to reflect the analyte of interest then can be called independently
or, more usefully, as part of generating summary statistics.

```{sql}
#| eval: TRUE

SELECT
  nitrate.usgs_site,
  nitrate.date,
  nitrate.value_std,
  ranges.event AS pre,
  ranges_post.post
FROM nitrate
JOIN firearea.discharge ON (
  discharge."Date" = nitrate.date
  AND discharge.usgs_site = nitrate.usgs_site
)
LEFT JOIN firearea.ranges ON (
  nitrate.usgs_site = ranges.usgs_site
  AND daterange(nitrate.date, nitrate.date, '[]') && ranges.pre
)
LEFT JOIN (
  SELECT
    nitrate.usgs_site,
    nitrate.date,
    ranges.event AS post
  FROM nitrate
  LEFT JOIN firearea.ranges ON (
    nitrate.usgs_site = ranges.usgs_site
    AND daterange(nitrate.date, nitrate.date, '[]') && ranges.post
  )
) AS ranges_post ON (
  ranges_post.usgs_site = nitrate.usgs_site
  AND ranges_post.date = nitrate.date
)
ORDER BY
  nitrate.usgs_site,
  nitrate.date
;

```

# ecoregions (file)

Join (spatially) usgs_site to firearea.ecoregions table. Note that these
geometries are as 4326. Chaning to a projected CRS (e.g., 5070) does generate
differet (and probably more accurate) results but the differences are trivial.

```{sql}
#| eval: TRUE
#| label: ecoregions

\COPY (
SELECT
  ecoregion_catchments.usgs_site,
  ecoregions.ogc_fid,
  ecoregions.na_l3code,
  ecoregions.na_l3name,
  ecoregions.na_l2code,
  ecoregions.na_l2name,
  ecoregions.na_l1code,
  ecoregions.na_l1name,
  ecoregions.na_l3key,
  ecoregions.na_l2key,
  ecoregions.na_l1key,
  ecoregions.shape_leng,
  ecoregions.shape_area,
  ecoregions.ai_mode,
  ecoregions.ai_mean,
  ecoregions.ai_median,
  ecoregions.ai_mean_narm,
  100.0 * ST_Area(ST_Intersection(ecoregion_catchments.geometry, ecoregions.wkb_geometry)) / NULLIF(ST_Area(ecoregion_catchments.geometry), 0) AS percent_overlap
FROM firearea.ecoregion_catchments
JOIN firearea.ecoregions
  ON ST_Intersects(ecoregion_catchments.geometry, ecoregions.wkb_geometry)
) to '/tmp/study_sites_ecoregions.csv' WITH CSV HEADER
;

```

# nitrate

## view: combined nitrate

Create a view of standardized (forms, units) nitrate that reflects data from
from both the USGS and non-USGS data sources.

Convert NEON and SBC data (micromoles) to `mg NO3-N / L`.

```{sql}
#| eval: TRUE
#| label: nitrate-values

DROP VIEW IF EXISTS firearea.nitrate ;

CREATE VIEW firearea.nitrate AS 
SELECT
  usgs_site,
  "ActivityStartDate" AS date,
  'nitrate' as analyte,
  AVG (value_std) AS value_std,
  'mg/L as N' AS units_std
FROM firearea.usgs_water_chem_std
WHERE
  "USGSPCode" IN (
    '00618',
    '00631'
  )
GROUP BY
  usgs_site,
  date
UNION
SELECT
  usgs_site,
  date,
  analyte,
  CASE
    WHEN unit ~~* 'micromoles%' THEN mean * (14.0 / 1000.0)
    WHEN unit ~~* '%uM%' THEN mean * (14.0 / 1000.0) 
    ELSE mean
  END value_std,
  CASE
    WHEN unit ~~* 'micromoles%' THEN 'mg/L as N'
    WHEN unit ~~* '%uM%' THEN 'mg/L as N' 
    ELSE unit
  END units_std
FROM firearea.non_usgs_water_chem
WHERE
(
  analyte ~~* '%nitrate%' OR
  analyte ~~* '%no3%'
) AND
  usgs_site !~~* '%bell%'
;

```

## view: nitrate with summary statistics

Generate a view of summary statistics surrounding nitrate data
availability (number of samples pre, post fire; time (days) since previous
fire; etc.).

The `chem_ranges` CTE uses the template detailed in `chemistry with ranges`.

The `num_pre_fire` and `num_post_fire` reflect the number of nitrate
observations in the period between the fire of interest and the previous and
next fires, respectively; not to be confused with the number of observations
at any point prior to and after the fire of interest, respectively.

The number of nitrate observations reflects observations for which there is
also a discharge measurement.

This query is likely not to be employed as the project has decided to use
aggregated fires in the fire season (this query addressed only unaggregated
data) but I think there are some errors here so it should be evaluated before
a possible future use.

```{sql}
#| eval: FALSE
#| label: nitrate-ranges

DROP VIEW IF EXISTS firearea.nitrate_ranges ;

CREATE VIEW firearea.nitrate_ranges AS 
WITH chem_ranges AS (
  SELECT
    nitrate.usgs_site,
    nitrate.date,
    nitrate.value_std,
    ranges.event AS pre,
    ranges_post.post
  FROM firearea.nitrate
  JOIN firearea.discharge ON (
    discharge."Date" = nitrate.date
    AND discharge.usgs_site = nitrate.usgs_site
  )
  LEFT JOIN firearea.ranges ON (
    nitrate.usgs_site = ranges.usgs_site
    -- AND daterange(nitrate.date, nitrate.date, '[]') && ranges.pre
    AND ranges.pre @> nitrate.date
  )
  LEFT JOIN (
    SELECT
      nitrate.usgs_site,
      nitrate.date,
      ranges.event AS post
    FROM firearea.nitrate 
    LEFT JOIN firearea.ranges ON (
      nitrate.usgs_site = ranges.usgs_site
      -- AND daterange(nitrate.date, nitrate.date, '[]') && ranges.post
      AND ranges.post @> nitrate.date
    )
  ) AS ranges_post ON (
    ranges_post.usgs_site = nitrate.usgs_site
    AND ranges_post.date = nitrate.date
  )
  ORDER BY
    nitrate.usgs_site,
    nitrate.date
)
SELECT
  pre_fire.usgs_site,
  pre_fire.pre AS event,
  adjacent_fire.date,
  adjacent_fire.days_since_prior_fire,
  pre_fire.num_pre_fire,
  post_fire.num_post_fire
FROM (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.pre,
    count(chem_ranges.pre) AS num_pre_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.pre
) AS pre_fire
JOIN (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.post,
    count(chem_ranges.post) AS num_post_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.post
) AS post_fire ON (
    post_fire.usgs_site = pre_fire.usgs_site
    AND post_fire.post  = pre_fire.pre
)
LEFT JOIN (
  SELECT
    usgs_site,
    date,
    event,
    UPPER(ranges.pre) - LOWER(ranges.pre) AS days_since_prior_fire
  FROM firearea.ranges
) AS adjacent_fire ON (
    adjacent_fire.usgs_site = pre_fire.usgs_site
    AND adjacent_fire.event = pre_fire.pre
)
;

```

Generate a view of summary statistics surrounding nitrate data
availability (number of samples pre, post fire).

The `num_pre_fire` and `num_post_fire` reflect the number of nitrate
observations in the period prior to and after fire or aggregated fires of
interest; not to be confused with the number of observations between a fire or
aggregated fires and interest and the next fire as is the case for
view::nitrate_ranges.

The number of nitrate observations reflects observations for which there is
also a discharge measurement.

```{sql}
#| eval: TRUE
#| label: nitrate-counts

DROP VIEW IF EXISTS firearea.nitrate_counts ;

CREATE VIEW firearea.nitrate_counts AS 
WITH nitrate_discharge AS (
  SELECT
    nitrate.usgs_site,
    nitrate.date
  FROM firearea.nitrate
  JOIN firearea.discharge ON (
    discharge."Date" = nitrate.date
    AND discharge.usgs_site = nitrate.usgs_site
  )
)
SELECT
  nitrate_discharge.usgs_site,
  ranges_agg.events,
  ranges_agg.start_date,
  ranges_agg.end_date,
  SUM(CASE WHEN nitrate_discharge.date < ranges_agg.start_date THEN 1 ELSE 0 END) AS count_before_start,
  SUM(CASE WHEN nitrate_discharge.date > ranges_agg.end_date THEN 1 ELSE 0 END) AS count_after_end
FROM firearea.ranges_agg
JOIN nitrate_discharge ON (ranges_agg.usgs_site = nitrate_discharge.usgs_site)
GROUP BY
  nitrate_discharge.usgs_site,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.events
;

```

## export: nitrate summary

```{sql}
#| eval: TRUE
#| label: export-nitrate-summary

\COPY (
SELECT
  ranges_agg.*,
  nitrate_counts.count_before_start,
  nitrate_counts.count_after_end
FROM firearea.ranges_agg 
JOIN firearea.nitrate_counts ON 
  ranges_agg.usgs_site = nitrate_counts.usgs_site AND
  (
    ARRAY(SELECT UNNEST(ranges_agg.events) ORDER BY 1) = 
    ARRAY(SELECT UNNEST(nitrate_counts.events) ORDER BY 1)
  )
) TO '/tmp/nitrate_summary.csv' WITH CSV HEADER
;

```

## export: nitrate concentrations

```{sql}
#| eval: TRUE
#| label: export-nitrate-concentrations

\COPY (
SELECT *
FROM firearea.nitrate
WHERE usgs_site IN (
  SELECT DISTINCT usgs_site
  FROM firearea.nitrate_counts
)
) TO '/tmp/nitrate.csv' WITH CSV HEADER
;

```

## export: discharge at nitrate data sites

```{sql}
#| eval: TRUE
#| label: export-nitrate-Q

\COPY (
SELECT *
FROM firearea.discharge
WHERE usgs_site IN (
  SELECT DISTINCT usgs_site
  FROM firearea.nitrate_counts
)
) TO '/tmp/nitrate_q.csv' WITH CSV HEADER
;

```

## export: nitrate summary and dd_area_stats (archive)

Combine summary statistics with dd_area_stats for a more comprehensive
summary.

```{sql}
#| eval: FALSE
#| label: nitrate_summary_dd_area

\COPY (
SELECT
  dd_area_stats.*,
  nitrate_summary.days_since_prior_fire,
  nitrate_summary.num_pre_fire,
  nitrate_summary.num_post_fire
FROM firearea.nitrate_summary
RIGHT JOIN
firearea.dd_area_stats ON (
  dd_area_stats.usgs_site    = nitrate_summary.usgs_site
  AND dd_area_stats.event_id = nitrate_summary.event
)
) TO '/tmp/nitrate_dd_area.csv' WITH DELIMITER ',' CSV HEADER
;

```

## extract: fire-impacted c–q data extraction (light filter)

This SQL query extracts paired nitrate and discharge observations from USGS
monitoring sites, structured to analyze how fire affects
concentration–discharge (C–Q) relationships. Specifically, it:

- **Joins** standardized nitrate data (`firearea.nitrate`), daily discharge
(`firearea.discharge_daily`), and fire metadata (`firearea.ranges_agg`).
- **Labels each observation** as `"before"` or `"after"` the fire window
defined by `start_date` and `end_date` for each `usgs_site` and `year`.
- **Filters the results** to include only those site-year-fire windows with:
  - ≥ 10 valid nitrate-discharge records **before** the fire window, and
  - ≥ 10 valid records **after** the fire window.
- **Includes** the following key columns for regression analysis in R:
  - `usgs_site`, `year`, `start_date`, `end_date`
  - `cum_per_cent_burned` – cumulative % of catchment burned
  - `segment` – either `"before"` or `"after"` the fire window
  - `date`, `value_std`, and `"Flow"` – log-transformed response and predictor
  - `before_count` and `after_count` – for QA/QC or additional stratification

This filtering ensures the resulting dataset is suitable for log–log regression
models and statistical comparison of slope and intercept values across pre- and
post-fire conditions and varying fire severities.

output:

| Column                   | Description                             |
| ------------------------ | --------------------------------------- |
| `usgs_site`              | USGS site ID                            |
| `year`                   | Fire year from `ranges_agg`             |
| `start_date`, `end_date` | Fire window dates                       |
| `cum_per_cent_burned`    | Percent of catchment burned             |
| `segment`                | `'before'` or `'after'` fire window     |
| `date`                   | Observation date                        |
| `value_std`              | Nitrate concentration (standardized)    |
| `"Flow"`                 | Daily discharge value                   |
| `before_count`           | Count of data points before fire window |
| `after_count`            | Count of data points after fire window  |


```{sql}
#| eval: FALSE
#| label: nitrate_summary_dd_area

\COPY (
SELECT
  main.usgs_site,
  main.year,
  main.start_date,
  main.end_date,
  main.cum_per_cent_burned,
  main.segment,
  main.date,
  main.value_std,
  main."Flow",
  counts.before_count,
  counts.after_count
FROM (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_per_cent_burned,
    CASE
      WHEN firearea.nitrate.date < firearea.ranges_agg.start_date THEN 'before'
      WHEN firearea.nitrate.date > firearea.ranges_agg.end_date THEN 'after'
    END AS segment,
    firearea.nitrate.date,
    firearea.nitrate.value_std,
    firearea.discharge."Flow"
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
    AND (
      firearea.nitrate.date < firearea.ranges_agg.start_date
      OR firearea.nitrate.date > firearea.ranges_agg.end_date
    )
) AS main
JOIN (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_per_cent_burned,
    COUNT(CASE WHEN firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date THEN 1 END) AS after_count
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
  GROUP BY
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_per_cent_burned
  HAVING
    COUNT(CASE WHEN firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) >= 10
    AND
    COUNT(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date THEN 1 END) >= 10
) AS counts
  ON main.usgs_site = counts.usgs_site
  AND main.year = counts.year
  AND main.start_date = counts.start_date
  AND main.end_date = counts.end_date
  AND main.cum_per_cent_burned = counts.cum_per_cent_burned
) TO '/tmp/nitrate_discharge_data.csv' WITH CSV HEADER
;

```

## analyze: regression analysis: log–log c–q relationships

R script fits a log–log linear regression model to assess the relationship
between standardized nitrate concentration (`value_std`) and daily discharge
(`Flow`), stratified by site, year, fire window, and segment (before/after
fire). The model has the form:

`log(value_std) = slope * log(Flow) + log(intercept)`

key features:

- Uses only observations where `Flow > 0` and `value_std > 0`.
- Fits a model separately for each group: `usgs_site`, `year`, `start_date`,
`end_date`, `segment`.
- Extracts model coefficients using `broom::tidy()`, including:
  - `log(Flow)` slope
  - log-scale intercept (also transformed to natural scale)
  - standard errors and p-values
- Returns a wide-format table suitable for further statistical or visual
analysis.

output:

| Column                   | Description                                                                |
| ------------------------ | -------------------------------------------------------------------------- |
| `usgs_site`              | USGS site ID                                                               |
| `year`                   | The year associated with the date range from `ranges_agg`                  |
| `start_date`, `end_date` | Fire event window for that site and year                                   |
| `segment`                | Whether this regression used data `before` or `after` the fire window      |
| `log(Flow)_estimate`     | **Slope** of the regression — shows how much `value_std` changes with flow |
| `log(Flow)_std.error`    | Standard error of the slope estimate                                       |
| `log(Flow)_p.value`      | p-value testing if slope is significantly different from 0                 |
| `(Intercept)_estimate`   | **Log of the intercept** from the regression                               |
| `(Intercept)_std.error`  | Standard error of the log-intercept                                        |
| `(Intercept)_p.value`    | p-value testing if the intercept differs from 0                            |
| `intercept_estimate`     | **Exponentiated intercept**, i.e., actual intercept on original scale      |

```{r}
#| eval: TRUE
#| label: nitrate_cq 

data <- readr::read_csv("/tmp/nitrate_discharge_data.csv")

# -- originally addressed here but moved to SQL --
# Only keep valid groups with ≥ 10 observations in each segment
# valid_groups <- data |>
#   dplyr::distinct(usgs_site, year, start_date, end_date,
#                   before_count, after_count, cum_per_cent_burned) |>
#   dplyr::filter(before_count >= 10, after_count >= 10)

# filter dataset to valid groups
# data_filtered <- data |>
#   dplyr::inner_join(valid_groups, by = c("usgs_site", "year", "start_date", "end_date"))

# Fit grouped log-log regressions

regression_results <- data |>
  dplyr::filter(Flow > 0, value_std > 0) |>
  dplyr::group_by(usgs_site, year, start_date, end_date,
                  segment, cum_per_cent_burned) |>
  dplyr::group_modify(\(.x, .y) {
    if (nrow(.x) < 2) {
      return(tibble::tibble(
        term      = character(),
        estimate  = numeric(),
        std.error = numeric(),
        statistic = numeric(),
        p.value   = numeric()
      ))
    }

    stats::lm(log(value_std) ~ log(Flow), data = .x) |>
      broom::tidy()
  }) |>
  dplyr::ungroup()

# Pivot slope/intercept and attach burn % to each result
regression_wide <- regression_results |>
  dplyr::filter(term %in% c("(Intercept)", "log(Flow)")) |>
  dplyr::select(usgs_site, year, start_date, end_date, segment,
                cum_per_cent_burned, term, estimate, std.error, p.value) |>
  tidyr::pivot_wider(
    names_from  = term,
    values_from = c(estimate, std.error, p.value),
    names_glue  = "{term}_{.value}"
  ) |>
  dplyr::mutate(
    intercept_estimate = exp(`(Intercept)_estimate`)
  )

```

## check: record inclusion criteria

To ensure statistical reliability, records are included in the regression
analysis only if both of the following are true for each unique group
(`usgs_site`, `year`, `start_date`, `end_date`):

- There are at least **10 valid nitrate–discharge observations before** the
fire window.
- There are at least **10 valid observations after** the fire window.

This filtering is enforced at the SQL query level, so no additional filtering
is required in R. The SQL query also returns `before_count` and `after_count`
for transparency and diagnostics.

output: 

| Column                  | Description                                    |
|-------------------------|------------------------------------------------|
| `usgs_site`             | Site ID                                        |
| `year`                  | Year of fire window                            |
| `start_date` / `end_date` | Fire window boundary                        |
| `cum_per_cent_burned`   | % catchment burned                             |
| `before_count`          | Number of valid observations before fire       |
| `after_count`           | Number of valid observations after fire        |
| `inclusion_status`      | `"included"` or `"excluded"` for your analysis |

```{sql}
#| eval: TRUE
#| label: nitrate_records

SELECT
  firearea.nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.cum_per_cent_burned,
  COUNT(CASE WHEN firearea.nitrate.date < ranges_agg.start_date THEN 1 END) AS before_count,
  COUNT(CASE WHEN firearea.nitrate.date > ranges_agg.end_date THEN 1 END) AS after_count,
  CASE
    WHEN COUNT(CASE WHEN firearea.nitrate.date < ranges_agg.start_date THEN 1 END) >= 10
     AND COUNT(CASE WHEN firearea.nitrate.date > ranges_agg.end_date THEN 1 END) >= 10
    THEN 'included'
    ELSE 'excluded'
  END AS inclusion_status
FROM firearea.nitrate
JOIN firearea.discharge_daily
  ON firearea.nitrate.usgs_site = firearea.discharge_daily.usgs_site
  AND firearea.nitrate.date = firearea.discharge_daily."Date"
JOIN firearea.ranges_agg
  ON firearea.nitrate.usgs_site = ranges_agg.usgs_site
WHERE firearea.nitrate.value_std IS NOT NULL
  AND firearea.discharge_daily."Flow" IS NOT NULL
GROUP BY
  firearea.nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.cum_per_cent_burned
ORDER BY inclusion_status DESC, before_count ASC, after_count ASC
;

```

## plotting: c–q relationships

The `ggplot2` package is used to visualize how the slope of the log–log C–Q
relationship changes in response to fire severity:

1. **Paired Scatterplot:**
   - Compares `before` vs. `after` slopes for each site-year.
   - Points above the 1:1 line indicate slope increased post-fire.
   - A regression line shows overall trend.

2. **Boxplot or Density Plot:**
   - Compares the distribution of slopes between `before` and `after` groups.
   - Visualizes enrichment or dilution tendencies post-fire.

3. **Slope vs. Burn Severity Plot:**
   - Plots `log(Flow)` slope as a function of `cum_per_cent_burned`.
   - Uses `segment` as a color/facet for interpreting pre/post-fire differences.
   - Optionally fits a linear model or smooth to assess trend strength.

```{sql}
#| eval: TRUE
#| label: nitrate_cq_plots

# paired slope comparison plot
ggplot2::ggplot(slope_plot_data, ggplot2::aes(x = before, y = after)) +
  ggplot2::geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  ggplot2::geom_point() +
  ggplot2::geom_smooth(method = "lm", se = FALSE, color = "blue") +
  ggplot2::labs(
    x = "Slope (Before Fire)",
    y = "Slope (After Fire)",
    title = "Change in log-log slope of Concentration ~ Discharge",
    subtitle = "Each point = one site-year; dashed line = no change"
  ) +
  ggplot2::theme_minimal()

# combine segments
ggplot2::ggplot(regression_wide, ggplot2::aes(x = segment, y = `log(Flow)_estimate`)) +
  ggplot2::geom_boxplot(fill = "lightblue") +
  ggplot2::labs(
    x = "Segment",
    y = "Slope (log-log)",
    title = "Distribution of Slopes Before vs. After Fire"
  ) +
  ggplot2::theme_minimal()

ggplot2::ggplot(
  regression_wide,
  ggplot2::aes(x = cum_per_cent_burned, y = `log(Flow)_estimate`, color = segment)) +
  ggplot2::geom_point(alpha = 0.7) +
  ggplot2::geom_smooth(method = "lm", se = TRUE) +
  ggplot2::labs(
    x = "% Catchment Burned",
    y = "C–Q Slope (log-log)",
    title = "Effect of Fire Size on Discharge–Concentration Slope"
  ) +
  ggplot2::theme_minimal()

```

## extract: fire-impacted c–q data extraction (strict filter)

synopsis:

This query (`nitrate_summary_dd_area_filtered`) extracts paired nitrate and
discharge observations from USGS and non-USGS monitoring sites, focusing on the
periods before and after fire events. It applies **strict filtering** to ensure
robust statistical analysis:

- **Joins**: Combines standardized nitrate data (`firearea.nitrate`), combined
discharge data (`firearea.discharge`), and fire event metadata
(`firearea.ranges_agg`).
- **Time Windows**: Selects observations within 3 years before each fire
window's `start_date` and 3 years after each `end_date`.
- **Segment Labeling**: Labels each observation as `'before'` or `'after'` the
fire window.
- **Strict Inclusion Criteria**: For each site/fire window, requires:
  - At least 10 valid nitrate–discharge observations in both the 3-year pre- and
  post-fire windows.
  - All four discharge quartiles (1–4) must be represented in both windows.
- **Output**: Returns all qualifying observations, along with counts and
quartile information, suitable for robust C–Q (concentration–discharge)
statistical analysis.

output:

| Column                | Description                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `usgs_site`           | USGS site ID                                                                |
| `year`                | Fire year from `ranges_agg`                                                 |
| `start_date`          | Fire window start date                                                      |
| `end_date`            | Fire window end date                                                        |
| `cum_per_cent_burned` | Percent of catchment burned during the fire window                          |
| `segment`             | `'before'` or `'after'` fire window, indicating observation timing          |
| `date`                | Observation date                                                            |
| `value_std`           | Standardized nitrate concentration                                          |
| `"Flow"`              | Daily discharge value                                                       |
| `quartile`            | Discharge quartile (1–4) for the observation                                |
| `before_count`        | Number of valid nitrate–discharge observations in the 3 years before fire   |
| `after_count`         | Number of valid nitrate–discharge observations in the 3 years after fire    |

A modification of this query omits the lines:

  COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) >= 10
  AND COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) >= 10

Omitting those lines, removes the constraint:

  - At least 10 valid nitrate–discharge observations in both the 3-year pre- and
  post-fire windows.

The query result is saved as: `nitrate_discharge_data_filtered_less_strict.csv`

```{sql}
#| eval: FALSE
#| label: nitrate_summary_dd_area_filtered

\COPY (
SELECT
  nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.cum_per_cent_burned,
  CASE
    WHEN nitrate.date < ranges_agg.start_date THEN 'before'
    WHEN nitrate.date > ranges_agg.end_date THEN 'after'
  END AS segment,
  nitrate.date,
  nitrate.value_std,
  discharge."Flow",
  discharge.quartile,
  counts.before_count,
  counts.after_count
FROM firearea.nitrate
JOIN firearea.discharge
  ON nitrate.usgs_site = discharge.usgs_site
  AND nitrate.date = discharge."Date"
JOIN firearea.ranges_agg
  ON nitrate.usgs_site = ranges_agg.usgs_site
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
JOIN (
  SELECT
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date,
    ranges_agg.cum_per_cent_burned,
    COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) AS after_count,
    MIN(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) AS min_before_quartile,
    MAX(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) AS max_before_quartile,
    MIN(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) AS min_after_quartile,
    MAX(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) AS max_after_quartile
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON nitrate.usgs_site = discharge.usgs_site
    AND nitrate.date = discharge."Date"
  JOIN firearea.ranges_agg
    ON nitrate.usgs_site = ranges_agg.usgs_site
  WHERE nitrate.value_std IS NOT NULL
    AND discharge."Flow" IS NOT NULL
    AND discharge.quartile IS NOT NULL
  GROUP BY
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date,
    ranges_agg.cum_per_cent_burned
  HAVING
    COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) >= 10
    AND COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) >= 10
    AND MIN(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) = 1
    AND MAX(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) = 4
    AND MIN(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) = 1
    AND MAX(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) = 4
) AS counts
  ON nitrate.usgs_site = counts.usgs_site
  AND ranges_agg.year = counts.year
  AND ranges_agg.start_date = counts.start_date
  AND ranges_agg.end_date = counts.end_date
  AND ranges_agg.cum_per_cent_burned = counts.cum_per_cent_burned
WHERE nitrate.value_std IS NOT NULL
  AND discharge."Flow" IS NOT NULL
  AND discharge.quartile IS NOT NULL
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
) TO '/tmp/nitrate_discharge_data_filtered.csv' WITH CSV HEADER
;

```

## extract: fire-impacted c–q data extraction (quartiles focus)

synopsis:

This query (`nitrate_q_upper_quartiles`) extracts paired nitrate and discharge
observations from USGS and non-USGS monitoring sites, focusing on the periods
before and after fire. It applies **strict filtering** to ensure robust
statistical analysis:

- **Joins**: Combines standardized nitrate data (`firearea.nitrate`), combined
discharge data (`firearea.discharge`), and fire event metadata
(`firearea.ranges_agg`).
- **Time Windows**: Selects observations within 3 years before each fire
window's `start_date` and 3 years after each `end_date`.
- **Segment Labeling**: Labels each observation as `'before'` or `'after'` the
fire window.
- **Strict Inclusion Criteria**: For each site/fire window, requires:
  - nitrate–discharge observations in both the 3-year pre- and post-fire
  windows
  - nitrate–discharge observations must include flow quartiles 2, 3, and 4 in
  both windows
- **Output**: Returns all qualifying observations, along with counts and
quartile information, suitable for robust C–Q (concentration–discharge)
statistical analysis.
- omits `cum_per_cent_burned` column featured in nitrate c-q queries documented
above

output:

| Column                | Description                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `usgs_site`           | USGS site ID                                                                |
| `year`                | Fire year from `ranges_agg`                                                 |
| `start_date`          | Fire window start date                                                      |
| `end_date`            | Fire window end date                                                        |
| `segment`             | `'before'` or `'after'` fire window, indicating observation timing          |
| `date`                | Observation date                                                            |
| `value_std`           | Standardized nitrate concentration                                          |
| `"Flow"`              | Daily discharge value                                                       |
| `quartile`            | Discharge quartile (1–4) for the observation                                |
| `before_count`        | Number of valid nitrate–discharge observations in the 3 years before fire   |
| `after_count`         | Number of valid nitrate–discharge observations in the 3 years after fire    |

The query result is saved as: `nitrate_discharge_data_filtered_quartiles_234.csv`

```{sql}
#| eval: FALSE
#| label: nitrate_q_upper_quartiles

\COPY (
SELECT
  nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  CASE
    WHEN nitrate.date < ranges_agg.start_date THEN 'before'
    WHEN nitrate.date > ranges_agg.end_date THEN 'after'
  END AS segment,
  nitrate.date,
  nitrate.value_std,
  discharge."Flow",
  discharge.quartile,
  counts.before_count,
  counts.after_count
FROM firearea.nitrate
JOIN firearea.discharge
  ON nitrate.usgs_site = discharge.usgs_site
  AND nitrate.date = discharge."Date"
JOIN firearea.ranges_agg
  ON nitrate.usgs_site = ranges_agg.usgs_site
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
JOIN (
  SELECT
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date,
    COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) AS after_count
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON nitrate.usgs_site = discharge.usgs_site
    AND nitrate.date = discharge."Date"
  JOIN firearea.ranges_agg
    ON nitrate.usgs_site = ranges_agg.usgs_site
  WHERE nitrate.value_std IS NOT NULL
    AND discharge."Flow" IS NOT NULL
    AND discharge.quartile IS NOT NULL
  GROUP BY
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date
  HAVING
    -- quartile 2, 3, and 4 must be present in before window
    SUM(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date AND discharge.quartile = 2 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date AND discharge.quartile = 3 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date AND discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
    -- quartile 2, 3, and 4 must be present in after window
    AND
    SUM(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') AND discharge.quartile = 2 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') AND discharge.quartile = 3 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') AND discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
) AS counts
  ON nitrate.usgs_site = counts.usgs_site
  AND ranges_agg.year = counts.year
  AND ranges_agg.start_date = counts.start_date
  AND ranges_agg.end_date = counts.end_date
WHERE nitrate.value_std IS NOT NULL
  AND discharge."Flow" IS NOT NULL
  AND discharge.quartile IS NOT NULL
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
) TO '/tmp/nitrate_discharge_data_filtered_quartiles_234.csv' WITH CSV HEADER
;

```

## extract: fire-impacted c–q data extraction (quartiles + max fire)

purpose:

This query extracts nitrate and discharge observations from USGS watershed
sites surrounding wildfire events. It isolates data for only the largest
valid fire event per watershed, where validity is defined by the presence of
adequate water quality monitoring data before and after the fire.

key objectives:

- Assess hydrologic and water quality response (nitrate + flow) to wildfire
  disturbances.
- Limit analysis to only the most impactful fire per watershed, based on fire
  area (`cum_fire_area`).
- ensure fire events are sufficiently monitored, with:
  - At least 3 years of data before and after the fire.
  - Presence of streamflow across flow quartiles 2, 3, and 4 in both windows.

core logic steps:

1. Join nitrate and discharge records by site and date.
2. Filter for valid data windows:
   - Records must fall within 3 years before or after each fire.
   - Each fire must have discharge records in quartiles 2–4 in both windows.
3. Select valid fires per watershed from `ranges_agg`, ensuring they meet all
data coverage criteria.
4. Identify the largest fire per `usgs_site` by selecting the maximum
`cum_fire_area` among valid events.
5. Return nitrate + discharge records for the selected fire per watershed, with
an additional field (`segment`) labeling records as “before” or “after” the
fire event.

inputs:

- `firearea.nitrate`: View of USGS and non-USGS nitrate observations
- `firearea.discharge`: Daily streamflow and derived quartile classification
- `firearea.ranges_agg`: Pre-aggregated wildfire periods and fire area metrics
  per watershed

outputs:

| column name         | description                                        |
|---------------------|----------------------------------------------------|
| `usgs_site`         | Site identifier                                    |
| `year`              | Fire event year                                    |
| `start_date`        | Fire event start date                              |
| `end_date`          | Fire event end date                                |
| `segment`           | Temporal label: `'before'` or `'after'` fire       |
| `date`              | Nitrate/discharge observation date                 |
| `value_std`         | Standardized nitrate concentration (mg/L as N)     |
| `"Flow"`            | Discharge (cfs)                                    |
| `quartile`          | Discharge flow quartile (1–4)                      |
| `before_count`      | Count of observations in 3 years before the fire   |
| `after_count`       | Count of observations in 3 years after the fire    |

The query result is saved as: `nitrate_discharge_quartiles_234_max_fire.csv`

```{sql}
#| eval: FALSE
#| label: nitrate_q_upper_quartiles_max_fire

\COPY (
WITH fire_with_data AS (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area,
    COUNT(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) AS after_count,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) AS bq2,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) AS bq3,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) AS bq4,
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) AS aq2,
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) AS aq3,
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) AS aq4
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
    AND firearea.discharge.quartile IS NOT NULL
  GROUP BY
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area
  HAVING
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
),
largest_fire_per_site AS (
  SELECT DISTINCT ON (usgs_site)
    *
  FROM fire_with_data
  ORDER BY usgs_site, cum_fire_area DESC
)
SELECT
  firearea.nitrate.usgs_site,
  largest_fire_per_site.year,
  largest_fire_per_site.start_date,
  largest_fire_per_site.end_date,
  CASE
    WHEN firearea.nitrate.date < largest_fire_per_site.start_date THEN 'before'
    WHEN firearea.nitrate.date > largest_fire_per_site.end_date THEN 'after'
  END AS segment,
  firearea.nitrate.date,
  firearea.nitrate.value_std,
  firearea.discharge."Flow",
  firearea.discharge.quartile,
  largest_fire_per_site.before_count,
  largest_fire_per_site.after_count
FROM firearea.nitrate
JOIN firearea.discharge
  ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
  AND firearea.nitrate.date = firearea.discharge."Date"
JOIN largest_fire_per_site
  ON firearea.nitrate.usgs_site = largest_fire_per_site.usgs_site
WHERE firearea.nitrate.value_std IS NOT NULL
  AND firearea.discharge."Flow" IS NOT NULL
  AND firearea.discharge.quartile IS NOT NULL
  AND (
    (firearea.nitrate.date >= (largest_fire_per_site.start_date - INTERVAL '3 years') AND firearea.nitrate.date < largest_fire_per_site.start_date)
    OR
    (firearea.nitrate.date > largest_fire_per_site.end_date AND firearea.nitrate.date <= (largest_fire_per_site.end_date + INTERVAL '3 years'))
  )
) TO '/tmp/nitrate_discharge_quartiles_234_max_fire.csv' WITH CSV HEADER
;

```

# ammonium

## temp: combined ammonium

Create a temporary table of standardized (forms, units) that
reflects data from both the USGS and non-USGS data sources.

```{sql}
#| eval: TRUE
#| label: ammonium

DROP TABLE IF EXISTS ammonium ;

CREATE TEMPORARY TABLE ammonium AS 
SELECT
  usgs_site,
  "ActivityStartDate" AS date,
  'ammonium' as analyte,
  AVG (value_std) AS value_std,
  'mg/L as N' AS units_std
FROM firearea.usgs_water_chem_std
WHERE "USGSPCode" IN ('00608')
GROUP BY
  usgs_site,
  date
UNION
SELECT
  usgs_site,
  date,
  analyte,
  mean AS value_std,
  unit AS units_std
FROM firearea.non_usgs_water_chem
WHERE analyte ~~* '%nh4%'
;

```


## temp: ammonium with summary statistics

Generate a temporary table of summary statistics surrounding ammonium data
availability (number of samples pre, post fire; time (days) since previous
fire; etc.).

The `chem_ranges` CTE uses the template detailed in `chemistry with ranges`.

```{sql}
#| eval: TRUE

DROP TABLE IF EXISTS ammonium_summary ;

CREATE TEMPORARY TABLE ammonium_summary AS 
WITH chem_ranges AS (
  SELECT
    ammonium.usgs_site,
    ammonium.date,
    ammonium.value_std,
    ranges.event AS pre,
    ranges_post.post
  FROM ammonium
  JOIN firearea.discharge ON (
    discharge."Date" = ammonium.date
    AND discharge.usgs_site = ammonium.usgs_site
  )
  LEFT JOIN firearea.ranges ON (
    ammonium.usgs_site = ranges.usgs_site
    AND ranges.pre @> ammonium.date
    -- AND daterange(ammonium.date, ammonium.date, '[]') && ranges.pre
  )
  LEFT JOIN (
    SELECT
      ammonium.usgs_site,
      ammonium.date,
      ranges.event AS post
    FROM ammonium
    LEFT JOIN firearea.ranges ON (
      ammonium.usgs_site = ranges.usgs_site
      AND ranges.post @> ammonium.date
      -- AND daterange(ammonium.date, ammonium.date, '[]') && ranges.post
    )
  ) AS ranges_post ON (
      ranges_post.usgs_site = ammonium.usgs_site
      AND ranges_post.date  = ammonium.date
  )
  ORDER BY
    ammonium.usgs_site,
    ammonium.date
)
SELECT
  pre_fire.usgs_site,
  pre_fire.pre AS event,
  adjacent_fire.date,
  adjacent_fire.days_since_prior_fire,
  adjacent_fire.days_until_next_fire,
  pre_fire.num_pre_fire,
  post_fire.num_post_fire
FROM (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.pre,
    count(chem_ranges.pre) AS num_pre_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.pre
) AS pre_fire
JOIN (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.post,
    count(chem_ranges.post) AS num_post_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.post
) AS post_fire ON (
    post_fire.usgs_site = pre_fire.usgs_site
    AND post_fire.post  = pre_fire.pre
)
LEFT JOIN (
  SELECT
    usgs_site,
    date,
    event,
    UPPER(ranges.pre) - LOWER(ranges.pre) AS days_since_prior_fire,
    UPPER(ranges.post) - LOWER(ranges.post) AS days_until_next_fire
  FROM firearea.ranges
) AS adjacent_fire ON (
    adjacent_fire.usgs_site = pre_fire.usgs_site
    AND adjacent_fire.event = pre_fire.pre
)
;

```

## export: ammonium q events

Combine raw ammonium with Q and fire events.

```{sql}
#| eval: TRUE
#| label: ammonium_export

\COPY (
SELECT
  discharge.*,
  ammonium.*,
  fires.events,
  fires.ig_date
FROM firearea.discharge
LEFT JOIN ammonium ON (
  ammonium.usgs_site = discharge.usgs_site
  AND ammonium.date  = discharge."Date"
)
LEFT JOIN 
(
  SELECT
    usgs_site,
    ig_date,
    ARRAY_AGG(event_id) AS events
  FROM firearea.fires_catchments 
  GROUP BY
    usgs_site,
    ig_date
  ORDER BY ig_date
) AS fires ON (
    fires.usgs_site   = discharge.usgs_site
    AND fires.ig_date = discharge."Date"
)
) TO '/tmp/ammonium_q.csv' with DELIMITER ',' csv header
;

```


## export: ammonium summary and dd_area_stats

Combine summary statistics with dd_area_stats for a more comprehensive
summary.

```{sql}
#| eval: TRUE

\COPY (
SELECT
  dd_area_stats.*,
  ammonium_summary.days_since_prior_fire,
  ammonium_summary.num_pre_fire,
  ammonium_summary.num_post_fire
FROM ammonium_summary
RIGHT JOIN
dd_area_stats ON (
  dd_area_stats.usgs_site    = ammonium_summary.usgs_site
  AND dd_area_stats.event_id = ammonium_summary.event
)
) TO '/tmp/ammonium_dd_area.csv' WITH DELIMITER ',' CSV HEADER
;

```


# specific conductance

## temp: combined specific conductance

Create a temporary table of standardized (forms, units) that reflects data
from both the USGS and non-USGS data sources.

```{sql}
#| eval: TRUE
#| label: specific_conductance

DROP TABLE IF EXISTS specific_conductance ;

CREATE TEMPORARY TABLE specific_conductance AS 
SELECT
  usgs_site,
  "ActivityStartDate" AS date,
  'specific_conductance' as analyte,
  AVG (value_std) AS value_std,
  'uS/cm @25C' AS units_std
FROM firearea.usgs_water_chem_std
WHERE
  "USGSPCode" IN ('00095')
GROUP BY
  usgs_site,
  date
UNION
SELECT
  usgs_site,
  date,
  'specific_conductance' as analyte,
  AVG (mean) AS value_std,
  'uS/cm @25C' AS units_std
FROM firearea.non_usgs_water_chem
WHERE
  analyte ~~* '%specificConductance%'
GROUP BY
  usgs_site,
  date
;

```

## temp: specific conductance with summary statistics

Generate a temporary table of summary statistics surrounding specific
conductance data availability (number of samples pre, post fire; time (days)
since previous fire; etc.).

The `chem_ranges` CTE uses the template detailed in `chemistry with ranges`.

```{sql}
#| eval: TRUE

DROP TABLE IF EXISTS specific_cond_summary ;

CREATE TEMPORARY TABLE specific_cond_summary AS 
WITH chem_ranges AS (
  SELECT
    specific_conductance.usgs_site,
    specific_conductance.date,
    specific_conductance.value_std,
    ranges.event AS pre,
    ranges_post.post
  FROM specific_conductance
  JOIN firearea.discharge ON (
    discharge."Date"        = specific_conductance.date
    AND discharge.usgs_site = specific_conductance.usgs_site
  )
  LEFT JOIN firearea.ranges ON (
    specific_conductance.usgs_site = ranges.usgs_site
    AND ranges.pre @> specific_conductance.date
  )
  LEFT JOIN (
    SELECT
      specific_conductance.usgs_site,
      specific_conductance.date,
      ranges.event AS post
    FROM specific_conductance
    LEFT JOIN firearea.ranges ON (
      specific_conductance.usgs_site = ranges.usgs_site
      AND ranges.post @> specific_conductance.date
    )
  ) AS ranges_post ON (
      ranges_post.usgs_site = specific_conductance.usgs_site
      AND ranges_post.date  = specific_conductance.date
  )
  ORDER BY
    specific_conductance.usgs_site,
    specific_conductance.date
)
SELECT
  pre_fire.usgs_site,
  pre_fire.pre AS event,
  adjacent_fire.date,
  adjacent_fire.days_since_prior_fire,
  adjacent_fire.days_until_next_fire,
  pre_fire.num_pre_fire,
  post_fire.num_post_fire
FROM (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.pre,
    count(chem_ranges.pre) AS num_pre_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.pre
) AS pre_fire
JOIN (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.post,
    count(chem_ranges.post) AS num_post_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.post
) AS post_fire ON (
    post_fire.usgs_site = pre_fire.usgs_site
    AND post_fire.post  = pre_fire.pre
)
LEFT JOIN (
  SELECT
    usgs_site,
    date,
    event,
    UPPER(ranges.pre) - LOWER(ranges.pre) AS days_since_prior_fire,
    UPPER(ranges.post) - LOWER(ranges.post) AS days_until_next_fire
  FROM firearea.ranges
) AS adjacent_fire ON (
    adjacent_fire.usgs_site = pre_fire.usgs_site
    AND adjacent_fire.event = pre_fire.pre
)
;

```

## export: specific conductance q events

Combine raw specific conductance with Q and fire events.

```{sql}
#| eval: TRUE
#| label: specific_conductance_export

\COPY (
SELECT
  discharge.*,
  specific_conductance.*,
  fires.events,
  fires.ig_date
FROM firearea.discharge
LEFT JOIN specific_conductance ON (
  specific_conductance.usgs_site = discharge.usgs_site
  AND specific_conductance.date  = discharge."Date"
)
LEFT JOIN 
(
  SELECT
    usgs_site,
    ig_date,
    ARRAY_AGG(event_id) AS events
  FROM firearea.fires_catchments 
  GROUP BY
    usgs_site,
    ig_date
  ORDER BY ig_date
) AS fires ON (
    fires.usgs_site   = discharge.usgs_site
    AND fires.ig_date = discharge."Date"
)
) TO '/tmp/specific_conductance_q.csv' with DELIMITER ',' csv header
;

```


## export: specific conductance summary and dd_area_stats

Combine summary statistics with dd_area_stats for a more comprehensive
summary.

```{sql}
#| eval: TRUE

\COPY (
SELECT
  dd_area_stats.*,
  specific_cond_summary.days_since_prior_fire,
  specific_cond_summary.num_pre_fire,
  specific_cond_summary.num_post_fire
FROM specific_cond_summary
RIGHT JOIN
dd_area_stats ON (
  dd_area_stats.usgs_site    = specific_cond_summary.usgs_site
  AND dd_area_stats.event_id = specific_cond_summary.event
)
) TO '/tmp/specific_conductance_dd_area.csv' WITH DELIMITER ',' CSV HEADER
;

```
