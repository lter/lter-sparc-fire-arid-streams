# nitrate

## view: combined nitrate

Create a view of standardized (forms, units) nitrate that reflects data from
from both the USGS and non-USGS data sources.

Convert NEON and SBC data (micromoles) to `mg NO3-N / L`.

```{sql}
#| eval: TRUE
#| label: nitrate-values

DROP VIEW IF EXISTS firearea.nitrate ;

CREATE VIEW firearea.nitrate AS 
SELECT
  usgs_site,
  "ActivityStartDate" AS date,
  'nitrate' as analyte,
  AVG (value_std) AS value_std,
  'mg/L as N' AS units_std
FROM firearea.usgs_water_chem_std
WHERE
  "USGSPCode" IN (
    '00618',
    '00631'
  )
GROUP BY
  usgs_site,
  date
UNION
SELECT
  usgs_site,
  date,
  analyte,
  CASE
    WHEN unit ~~* 'micromoles%' THEN mean * (14.0 / 1000.0)
    WHEN unit ~~* '%uM%' THEN mean * (14.0 / 1000.0) 
    ELSE mean
  END value_std,
  CASE
    WHEN unit ~~* 'micromoles%' THEN 'mg/L as N'
    WHEN unit ~~* '%uM%' THEN 'mg/L as N' 
    ELSE unit
  END units_std
FROM firearea.non_usgs_water_chem
WHERE
(
  analyte ~~* '%nitrate%' OR
  analyte ~~* '%no3%'
) AND
  usgs_site !~~* '%bell%'
;

```


## view: nitrate summary all (unused)

Generate a view of summary statistics surrounding nitrate data availability
(number of samples pre, post fire; time (days) since previous fire; etc.).

The `chem_ranges` CTE uses the template detailed in `chemistry with ranges`.

The `num_pre_fire` and `num_post_fire` reflect the number of nitrate
observations in the period between the fire of interest and the previous and
next fires, respectively; not to be confused with the number of observations at
any point prior to and after the fire of interest, respectively.

The number of nitrate observations reflects observations for which there is
also a discharge measurement.

This query is likely not to be employed as the project has decided to use
aggregated fires in the fire season (this query addressed only unaggregated
data) but I think there are some errors here so it should be evaluated before a
possible future use.

```{sql}
#| eval: FALSE
#| label: nitrate-ranges

DROP VIEW IF EXISTS firearea.nitrate_ranges ;

CREATE VIEW firearea.nitrate_ranges AS 
WITH chem_ranges AS (
  SELECT
    nitrate.usgs_site,
    nitrate.date,
    nitrate.value_std,
    ranges.event AS pre,
    ranges_post.post
  FROM firearea.nitrate
  JOIN firearea.discharge ON (
    discharge."Date" = nitrate.date
    AND discharge.usgs_site = nitrate.usgs_site
  )
  LEFT JOIN firearea.ranges ON (
    nitrate.usgs_site = ranges.usgs_site
    -- AND daterange(nitrate.date, nitrate.date, '[]') && ranges.pre
    AND ranges.pre @> nitrate.date
  )
  LEFT JOIN (
    SELECT
      nitrate.usgs_site,
      nitrate.date,
      ranges.event AS post
    FROM firearea.nitrate 
    LEFT JOIN firearea.ranges ON (
      nitrate.usgs_site = ranges.usgs_site
      -- AND daterange(nitrate.date, nitrate.date, '[]') && ranges.post
      AND ranges.post @> nitrate.date
    )
  ) AS ranges_post ON (
    ranges_post.usgs_site = nitrate.usgs_site
    AND ranges_post.date = nitrate.date
  )
  ORDER BY
    nitrate.usgs_site,
    nitrate.date
)
SELECT
  pre_fire.usgs_site,
  pre_fire.pre AS event,
  adjacent_fire.date,
  adjacent_fire.days_since_prior_fire,
  pre_fire.num_pre_fire,
  post_fire.num_post_fire
FROM (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.pre,
    count(chem_ranges.pre) AS num_pre_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.pre
) AS pre_fire
JOIN (
  SELECT
    chem_ranges.usgs_site,
    chem_ranges.post,
    count(chem_ranges.post) AS num_post_fire
  FROM chem_ranges
  GROUP BY
    chem_ranges.usgs_site,
    chem_ranges.post
) AS post_fire ON (
    post_fire.usgs_site = pre_fire.usgs_site
    AND post_fire.post  = pre_fire.pre
)
LEFT JOIN (
  SELECT
    usgs_site,
    date,
    event,
    UPPER(ranges.pre) - LOWER(ranges.pre) AS days_since_prior_fire
  FROM firearea.ranges
) AS adjacent_fire ON (
    adjacent_fire.usgs_site = pre_fire.usgs_site
    AND adjacent_fire.event = pre_fire.pre
)
;

```


## view: nitrate summary summer

Generate a view of summary statistics surrounding nitrate data
availability (number of samples pre, post fire).

The `num_pre_fire` and `num_post_fire` reflect the number of nitrate
observations in the period prior to and after fire or aggregated fires of
interest; not to be confused with the number of observations between a fire or
aggregated fires and interest and the next fire as is the case for
view::nitrate_ranges.

The number of nitrate observations reflects observations for which there is
also a discharge measurement.

```{sql}
#| eval: TRUE
#| label: nitrate-counts

DROP VIEW IF EXISTS firearea.nitrate_counts ;

CREATE VIEW firearea.nitrate_counts AS 
WITH nitrate_discharge AS (
  SELECT
    nitrate.usgs_site,
    nitrate.date
  FROM firearea.nitrate
  JOIN firearea.discharge ON (
    discharge."Date" = nitrate.date
    AND discharge.usgs_site = nitrate.usgs_site
  )
)
SELECT
  nitrate_discharge.usgs_site,
  ranges_agg.events,
  ranges_agg.start_date,
  ranges_agg.end_date,
  SUM(CASE WHEN nitrate_discharge.date < ranges_agg.start_date THEN 1 ELSE 0 END) AS count_before_start,
  SUM(CASE WHEN nitrate_discharge.date > ranges_agg.end_date THEN 1 ELSE 0 END) AS count_after_end
FROM firearea.ranges_agg
JOIN nitrate_discharge ON (ranges_agg.usgs_site = nitrate_discharge.usgs_site)
GROUP BY
  nitrate_discharge.usgs_site,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.events
;

```


## m.view: largest fire

purpose:

This materialized view identifies the largest wildfire event per watershed
(`usgs_site`) that meets strict pre- and post-fire data quality criteria for
water quality analysis. It enables fast, repeatable queries for analyzing
wildfire impacts on nitrate and discharge patterns.

use case:

- Supports analysis of nitrate and streamflow responses to wildfire.
- Used to restrict focus to watersheds with both extensive monitoring coverage
  and a single, largest impactful fire.
- Reused in downstream workflows for filtering, reporting, or dashboard
  visualizations.

logic summary:

1. Join nitrate and discharge records by site and date.
2. Match those records to fire windows from `ranges_agg`.
3. Apply Data Sufficiency Filters:
  - Must have nitrate + discharge data in the 3 years before and after each
    fire.
  - Must include observations in flow quartiles 2, 3, and 4 in both windows.
4. Group results by fire event (site, year, start/end date).
5. Select only the largest valid fire per watershed, ranked by `cum_fire_area`.

fields included:

| Column Name      | Description                                                  |
|------------------|--------------------------------------------------------------|
| `usgs_site`      | Watershed site identifier                                     |
| `year`           | Fire year (based on ignition date)                            |
| `start_date`     | Start date of fire event group                                |
| `end_date`       | End date of fire event group                                  |
| `cum_fire_area`  | Cumulative fire-affected area (kmÂ²) for the grouped event     |
| `before_count`   | Count of nitrate observations in 3-year window before fire  |
| `after_count`    | Count of nitrate observations in 3-year window after fire   |
| `bq2`, `bq3`, `bq4` | Count of pre-fire flow quartile 2, 3, and 4 observations   |
| `aq2`, `aq3`, `aq4` | Count of post-fire flow quartile 2, 3, and 4 observations  |

technical notes:

- Source tables: `firearea.nitrate`, `firearea.discharge`,
  `firearea.ranges_agg`
- Computation-intensive: uses joins, date filters, aggregation, and conditional
  `HAVING` clauses.
- Materialized to avoid recomputation and accelerate downstream query
  performance.
- Refresh as needed to reflect updates to nitrate, discharge, or fire data.

```{sql}
#| eval: TRUE
#| label: largest_nitrate_summer_fire

REFRESH MATERIALIZED VIEW firearea.largest_nitrate_valid_fire_per_site ;

CREATE MATERIALIZED VIEW firearea.largest_nitrate_valid_fire_per_site AS
WITH fire_with_data AS (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.events,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area,
    COUNT(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
               AND firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date
               AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) AS after_count,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) AS bq2,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) AS bq3,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) AS bq4,
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date
              AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) AS aq2,
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date
              AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) AS aq3,
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date
              AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) AS aq4
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
    AND firearea.discharge.quartile IS NOT NULL
  GROUP BY
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.events,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area
  HAVING
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
)
SELECT DISTINCT ON (usgs_site) *
FROM fire_with_data
ORDER BY usgs_site, cum_fire_area DESC
;

CREATE INDEX idx_nitrate_fire_usgs_site ON firearea.largest_nitrate_valid_fire_per_site(usgs_site) ;
CREATE INDEX idx_nitrate_fire_start_date ON firearea.largest_nitrate_valid_fire_per_site(start_date) ;

```

## export: nitrate summary

```{sql}
#| eval: TRUE
#| label: export-nitrate-summary

\COPY (
SELECT
  ranges_agg.*,
  nitrate_counts.count_before_start,
  nitrate_counts.count_after_end
FROM firearea.ranges_agg 
JOIN firearea.nitrate_counts ON 
  ranges_agg.usgs_site = nitrate_counts.usgs_site AND
  (
    ARRAY(SELECT UNNEST(ranges_agg.events) ORDER BY 1) = 
    ARRAY(SELECT UNNEST(nitrate_counts.events) ORDER BY 1)
  )
) TO '/tmp/nitrate_summary.csv' WITH CSV HEADER
;

```

## export: nitrate concentrations

```{sql}
#| eval: TRUE
#| label: export-nitrate-concentrations

\COPY (
SELECT *
FROM firearea.nitrate
WHERE usgs_site IN (
  SELECT DISTINCT usgs_site
  FROM firearea.nitrate_counts
)
) TO '/tmp/nitrate.csv' WITH CSV HEADER
;

```

## export: discharge at nitrate data sites

```{sql}
#| eval: TRUE
#| label: export-nitrate-Q

\COPY (
SELECT *
FROM firearea.discharge
WHERE usgs_site IN (
  SELECT DISTINCT usgs_site
  FROM firearea.nitrate_counts
)
) TO '/tmp/nitrate_q.csv' WITH CSV HEADER
;

```

## export: nitrate summary and dd_area_stats (archive)

Combine summary statistics with dd_area_stats for a more comprehensive summary.

```{sql}
#| eval: FALSE
#| label: nitrate_summary_dd_area

\COPY (
SELECT
  dd_area_stats.*,
  nitrate_summary.days_since_prior_fire,
  nitrate_summary.num_pre_fire,
  nitrate_summary.num_post_fire
FROM firearea.nitrate_summary
RIGHT JOIN
firearea.dd_area_stats ON (
  dd_area_stats.usgs_site    = nitrate_summary.usgs_site
  AND dd_area_stats.event_id = nitrate_summary.event
)
) TO '/tmp/nitrate_dd_area.csv' WITH DELIMITER ',' CSV HEADER
;

```

## extract: fire-impacted câq data extraction (light filter)

This SQL query extracts paired nitrate and discharge observations from USGS
monitoring sites, structured to analyze how fire affects
concentrationâdischarge (CâQ) relationships. Specifically, it:

- **Joins** standardized nitrate data (`firearea.nitrate`), daily discharge
(`firearea.discharge_daily`), and fire metadata (`firearea.ranges_agg`).
- **Labels each observation** as `"before"` or `"after"` the fire window
defined by `start_date` and `end_date` for each `usgs_site` and `year`.
- **Filters the results** to include only those site-year-fire windows with:
  - â¥ 10 valid nitrate-discharge records **before** the fire window, and
  - â¥ 10 valid records **after** the fire window.
- **Includes** the following key columns for regression analysis in R:
  - `usgs_site`, `year`, `start_date`, `end_date`
  - `cum_per_cent_burned` â cumulative % of catchment burned
  - `segment` â either `"before"` or `"after"` the fire window
  - `date`, `value_std`, and `"Flow"` â log-transformed response and predictor
  - `before_count` and `after_count` â for QA/QC or additional stratification

This filtering ensures the resulting dataset is suitable for logâlog regression
models and statistical comparison of slope and intercept values across pre- and
post-fire conditions and varying fire severities.

output:

| Column                   | Description                             |
| ------------------------ | --------------------------------------- |
| `usgs_site`              | USGS site ID                            |
| `year`                   | Fire year from `ranges_agg`             |
| `start_date`, `end_date` | Fire window dates                       |
| `cum_per_cent_burned`    | Percent of catchment burned             |
| `segment`                | `'before'` or `'after'` fire window     |
| `date`                   | Observation date                        |
| `value_std`              | Nitrate concentration (standardized)    |
| `"Flow"`                 | Daily discharge value                   |
| `before_count`           | Count of data points before fire window |
| `after_count`            | Count of data points after fire window  |


```{sql}
#| eval: FALSE
#| label: nitrate_summary_dd_area

\COPY (
SELECT
  main.usgs_site,
  main.year,
  main.start_date,
  main.end_date,
  main.cum_per_cent_burned,
  main.segment,
  main.date,
  main.value_std,
  main."Flow",
  counts.before_count,
  counts.after_count
FROM (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_per_cent_burned,
    CASE
      WHEN firearea.nitrate.date < firearea.ranges_agg.start_date THEN 'before'
      WHEN firearea.nitrate.date > firearea.ranges_agg.end_date THEN 'after'
    END AS segment,
    firearea.nitrate.date,
    firearea.nitrate.value_std,
    firearea.discharge."Flow"
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
    AND (
      firearea.nitrate.date < firearea.ranges_agg.start_date
      OR firearea.nitrate.date > firearea.ranges_agg.end_date
    )
) AS main
JOIN (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_per_cent_burned,
    COUNT(CASE WHEN firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date THEN 1 END) AS after_count
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
  GROUP BY
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_per_cent_burned
  HAVING
    COUNT(CASE WHEN firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) >= 10
    AND
    COUNT(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date THEN 1 END) >= 10
) AS counts
  ON main.usgs_site = counts.usgs_site
  AND main.year = counts.year
  AND main.start_date = counts.start_date
  AND main.end_date = counts.end_date
  AND main.cum_per_cent_burned = counts.cum_per_cent_burned
) TO '/tmp/nitrate_discharge_data.csv' WITH CSV HEADER
;

```

## analyze: regression analysis: logâlog câq relationships

R script fits a logâlog linear regression model to assess the relationship
between standardized nitrate concentration (`value_std`) and daily discharge
(`Flow`), stratified by site, year, fire window, and segment (before/after
fire). The model has the form:

`log(value_std) = slope * log(Flow) + log(intercept)`

key features:

- Uses only observations where `Flow > 0` and `value_std > 0`.
- Fits a model separately for each group: `usgs_site`, `year`, `start_date`,
`end_date`, `segment`.
- Extracts model coefficients using `broom::tidy()`, including:
  - `log(Flow)` slope
  - log-scale intercept (also transformed to natural scale)
  - standard errors and p-values
- Returns a wide-format table suitable for further statistical or visual
analysis.

output:

| Column                   | Description                                                                |
| ------------------------ | -------------------------------------------------------------------------- |
| `usgs_site`              | USGS site ID                                                               |
| `year`                   | The year associated with the date range from `ranges_agg`                  |
| `start_date`, `end_date` | Fire event window for that site and year                                   |
| `segment`                | Whether this regression used data `before` or `after` the fire window      |
| `log(Flow)_estimate`     | **Slope** of the regression â shows how much `value_std` changes with flow |
| `log(Flow)_std.error`    | Standard error of the slope estimate                                       |
| `log(Flow)_p.value`      | p-value testing if slope is significantly different from 0                 |
| `(Intercept)_estimate`   | **Log of the intercept** from the regression                               |
| `(Intercept)_std.error`  | Standard error of the log-intercept                                        |
| `(Intercept)_p.value`    | p-value testing if the intercept differs from 0                            |
| `intercept_estimate`     | **Exponentiated intercept**, i.e., actual intercept on original scale      |

```{r}
#| eval: TRUE
#| label: nitrate_cq 

data <- readr::read_csv("/tmp/nitrate_discharge_data.csv")

# -- originally addressed here but moved to SQL --
# Only keep valid groups with â¥ 10 observations in each segment
# valid_groups <- data |>
#   dplyr::distinct(usgs_site, year, start_date, end_date,
#                   before_count, after_count, cum_per_cent_burned) |>
#   dplyr::filter(before_count >= 10, after_count >= 10)

# filter dataset to valid groups
# data_filtered <- data |>
#   dplyr::inner_join(valid_groups, by = c("usgs_site", "year", "start_date", "end_date"))

# Fit grouped log-log regressions

regression_results <- data |>
  dplyr::filter(Flow > 0, value_std > 0) |>
  dplyr::group_by(usgs_site, year, start_date, end_date,
                  segment, cum_per_cent_burned) |>
  dplyr::group_modify(\(.x, .y) {
    if (nrow(.x) < 2) {
      return(tibble::tibble(
        term      = character(),
        estimate  = numeric(),
        std.error = numeric(),
        statistic = numeric(),
        p.value   = numeric()
      ))
    }

    stats::lm(log(value_std) ~ log(Flow), data = .x) |>
      broom::tidy()
  }) |>
  dplyr::ungroup()

# Pivot slope/intercept and attach burn % to each result
regression_wide <- regression_results |>
  dplyr::filter(term %in% c("(Intercept)", "log(Flow)")) |>
  dplyr::select(usgs_site, year, start_date, end_date, segment,
                cum_per_cent_burned, term, estimate, std.error, p.value) |>
  tidyr::pivot_wider(
    names_from  = term,
    values_from = c(estimate, std.error, p.value),
    names_glue  = "{term}_{.value}"
  ) |>
  dplyr::mutate(
    intercept_estimate = exp(`(Intercept)_estimate`)
  )

```

## check: record inclusion criteria

To ensure statistical reliability, records are included in the regression
analysis only if both of the following are true for each unique group
(`usgs_site`, `year`, `start_date`, `end_date`):

- There are at least **10 valid nitrateâdischarge observations before** the
fire window.
- There are at least **10 valid observations after** the fire window.

This filtering is enforced at the SQL query level, so no additional filtering
is required in R. The SQL query also returns `before_count` and `after_count`
for transparency and diagnostics.

output: 

| Column                  | Description                                    |
|-------------------------|------------------------------------------------|
| `usgs_site`             | Site ID                                        |
| `year`                  | Year of fire window                            |
| `start_date` / `end_date` | Fire window boundary                        |
| `cum_per_cent_burned`   | % catchment burned                             |
| `before_count`          | Number of valid observations before fire       |
| `after_count`           | Number of valid observations after fire        |
| `inclusion_status`      | `"included"` or `"excluded"` for your analysis |

```{sql}
#| eval: TRUE
#| label: nitrate_records

SELECT
  firearea.nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.cum_per_cent_burned,
  COUNT(CASE WHEN firearea.nitrate.date < ranges_agg.start_date THEN 1 END) AS before_count,
  COUNT(CASE WHEN firearea.nitrate.date > ranges_agg.end_date THEN 1 END) AS after_count,
  CASE
    WHEN COUNT(CASE WHEN firearea.nitrate.date < ranges_agg.start_date THEN 1 END) >= 10
     AND COUNT(CASE WHEN firearea.nitrate.date > ranges_agg.end_date THEN 1 END) >= 10
    THEN 'included'
    ELSE 'excluded'
  END AS inclusion_status
FROM firearea.nitrate
JOIN firearea.discharge_daily
  ON firearea.nitrate.usgs_site = firearea.discharge_daily.usgs_site
  AND firearea.nitrate.date = firearea.discharge_daily."Date"
JOIN firearea.ranges_agg
  ON firearea.nitrate.usgs_site = ranges_agg.usgs_site
WHERE firearea.nitrate.value_std IS NOT NULL
  AND firearea.discharge_daily."Flow" IS NOT NULL
GROUP BY
  firearea.nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.cum_per_cent_burned
ORDER BY inclusion_status DESC, before_count ASC, after_count ASC
;

```

## plotting: câq relationships

The `ggplot2` package is used to visualize how the slope of the logâlog CâQ
relationship changes in response to fire severity:

1. **Paired Scatterplot:**
   - Compares `before` vs. `after` slopes for each site-year.
   - Points above the 1:1 line indicate slope increased post-fire.
   - A regression line shows overall trend.

2. **Boxplot or Density Plot:**
   - Compares the distribution of slopes between `before` and `after` groups.
   - Visualizes enrichment or dilution tendencies post-fire.

3. **Slope vs. Burn Severity Plot:**
   - Plots `log(Flow)` slope as a function of `cum_per_cent_burned`.
   - Uses `segment` as a color/facet for interpreting pre/post-fire differences.
   - Optionally fits a linear model or smooth to assess trend strength.

```{sql}
#| eval: TRUE
#| label: nitrate_cq_plots

# paired slope comparison plot
ggplot2::ggplot(slope_plot_data, ggplot2::aes(x = before, y = after)) +
  ggplot2::geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  ggplot2::geom_point() +
  ggplot2::geom_smooth(method = "lm", se = FALSE, color = "blue") +
  ggplot2::labs(
    x = "Slope (Before Fire)",
    y = "Slope (After Fire)",
    title = "Change in log-log slope of Concentration ~ Discharge",
    subtitle = "Each point = one site-year; dashed line = no change"
  ) +
  ggplot2::theme_minimal()

# combine segments
ggplot2::ggplot(regression_wide, ggplot2::aes(x = segment, y = `log(Flow)_estimate`)) +
  ggplot2::geom_boxplot(fill = "lightblue") +
  ggplot2::labs(
    x = "Segment",
    y = "Slope (log-log)",
    title = "Distribution of Slopes Before vs. After Fire"
  ) +
  ggplot2::theme_minimal()

ggplot2::ggplot(
  regression_wide,
  ggplot2::aes(x = cum_per_cent_burned, y = `log(Flow)_estimate`, color = segment)) +
  ggplot2::geom_point(alpha = 0.7) +
  ggplot2::geom_smooth(method = "lm", se = TRUE) +
  ggplot2::labs(
    x = "% Catchment Burned",
    y = "CâQ Slope (log-log)",
    title = "Effect of Fire Size on DischargeâConcentration Slope"
  ) +
  ggplot2::theme_minimal()

```

## extract: fire-impacted câq data extraction (strict filter)

synopsis:

This query (`nitrate_summary_dd_area_filtered`) extracts paired nitrate and
discharge observations from USGS and non-USGS monitoring sites, focusing on the
periods before and after fire events. It applies **strict filtering** to ensure
robust statistical analysis:

- **Joins**: Combines standardized nitrate data (`firearea.nitrate`), combined
discharge data (`firearea.discharge`), and fire event metadata
(`firearea.ranges_agg`).
- **Time Windows**: Selects observations within 3 years before each fire
window's `start_date` and 3 years after each `end_date`.
- **Segment Labeling**: Labels each observation as `'before'` or `'after'` the
fire window.
- **Strict Inclusion Criteria**: For each site/fire window, requires:
  - At least 10 valid nitrateâdischarge observations in both the 3-year pre- and
  post-fire windows.
  - All four discharge quartiles (1â4) must be represented in both windows.
- **Output**: Returns all qualifying observations, along with counts and
quartile information, suitable for robust CâQ (concentrationâdischarge)
statistical analysis.

output:

| Column                | Description                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `usgs_site`           | USGS site ID                                                                |
| `year`                | Fire year from `ranges_agg`                                                 |
| `start_date`          | Fire window start date                                                      |
| `end_date`            | Fire window end date                                                        |
| `cum_per_cent_burned` | Percent of catchment burned during the fire window                          |
| `segment`             | `'before'` or `'after'` fire window, indicating observation timing          |
| `date`                | Observation date                                                            |
| `value_std`           | Standardized nitrate concentration                                          |
| `"Flow"`              | Daily discharge value                                                       |
| `quartile`            | Discharge quartile (1â4) for the observation                                |
| `before_count`        | Number of valid nitrateâdischarge observations in the 3 years before fire   |
| `after_count`         | Number of valid nitrateâdischarge observations in the 3 years after fire    |

A modification of this query omits the lines:

  COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) >= 10
  AND COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) >= 10

Omitting those lines, removes the constraint:

  - At least 10 valid nitrateâdischarge observations in both the 3-year pre- and
  post-fire windows.

The query result is saved as: `nitrate_discharge_data_filtered_less_strict.csv`

```{sql}
#| eval: FALSE
#| label: nitrate_summary_dd_area_filtered

\COPY (
SELECT
  nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  ranges_agg.cum_per_cent_burned,
  CASE
    WHEN nitrate.date < ranges_agg.start_date THEN 'before'
    WHEN nitrate.date > ranges_agg.end_date THEN 'after'
  END AS segment,
  nitrate.date,
  nitrate.value_std,
  discharge."Flow",
  discharge.quartile,
  counts.before_count,
  counts.after_count
FROM firearea.nitrate
JOIN firearea.discharge
  ON nitrate.usgs_site = discharge.usgs_site
  AND nitrate.date = discharge."Date"
JOIN firearea.ranges_agg
  ON nitrate.usgs_site = ranges_agg.usgs_site
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
JOIN (
  SELECT
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date,
    ranges_agg.cum_per_cent_burned,
    COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) AS after_count,
    MIN(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) AS min_before_quartile,
    MAX(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) AS max_before_quartile,
    MIN(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) AS min_after_quartile,
    MAX(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) AS max_after_quartile
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON nitrate.usgs_site = discharge.usgs_site
    AND nitrate.date = discharge."Date"
  JOIN firearea.ranges_agg
    ON nitrate.usgs_site = ranges_agg.usgs_site
  WHERE nitrate.value_std IS NOT NULL
    AND discharge."Flow" IS NOT NULL
    AND discharge.quartile IS NOT NULL
  GROUP BY
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date,
    ranges_agg.cum_per_cent_burned
  HAVING
    COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) >= 10
    AND COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) >= 10
    AND MIN(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) = 1
    AND MAX(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN discharge.quartile END) = 4
    AND MIN(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) = 1
    AND MAX(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN discharge.quartile END) = 4
) AS counts
  ON nitrate.usgs_site = counts.usgs_site
  AND ranges_agg.year = counts.year
  AND ranges_agg.start_date = counts.start_date
  AND ranges_agg.end_date = counts.end_date
  AND ranges_agg.cum_per_cent_burned = counts.cum_per_cent_burned
WHERE nitrate.value_std IS NOT NULL
  AND discharge."Flow" IS NOT NULL
  AND discharge.quartile IS NOT NULL
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
) TO '/tmp/nitrate_discharge_data_filtered.csv' WITH CSV HEADER
;

```

## extract: fire-impacted câq data extraction (quartiles focus)

synopsis:

This query (`nitrate_q_upper_quartiles`) extracts paired nitrate and discharge
observations from USGS and non-USGS monitoring sites, focusing on the periods
before and after fire. It applies **strict filtering** to ensure robust
statistical analysis:

- **Joins**: Combines standardized nitrate data (`firearea.nitrate`), combined
discharge data (`firearea.discharge`), and fire event metadata
(`firearea.ranges_agg`).
- **Time Windows**: Selects observations within 3 years before each fire
window's `start_date` and 3 years after each `end_date`.
- **Segment Labeling**: Labels each observation as `'before'` or `'after'` the
fire window.
- **Strict Inclusion Criteria**: For each site/fire window, requires:
  - nitrateâdischarge observations in both the 3-year pre- and post-fire
  windows
  - nitrateâdischarge observations must include flow quartiles 2, 3, and 4 in
  both windows
- **Output**: Returns all qualifying observations, along with counts and
quartile information, suitable for robust CâQ (concentrationâdischarge)
statistical analysis.
- omits `cum_per_cent_burned` column featured in nitrate c-q queries documented
above

output:

| Column                | Description                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `usgs_site`           | USGS site ID                                                                |
| `year`                | Fire year from `ranges_agg`                                                 |
| `start_date`          | Fire window start date                                                      |
| `end_date`            | Fire window end date                                                        |
| `segment`             | `'before'` or `'after'` fire window, indicating observation timing          |
| `date`                | Observation date                                                            |
| `value_std`           | Standardized nitrate concentration                                          |
| `"Flow"`              | Daily discharge value                                                       |
| `quartile`            | Discharge quartile (1â4) for the observation                                |
| `before_count`        | Number of valid nitrateâdischarge observations in the 3 years before fire   |
| `after_count`         | Number of valid nitrateâdischarge observations in the 3 years after fire    |

The query result is saved as: `nitrate_discharge_data_filtered_quartiles_234.csv`

```{sql}
#| eval: FALSE
#| label: nitrate_q_upper_quartiles

\COPY (
SELECT
  nitrate.usgs_site,
  ranges_agg.year,
  ranges_agg.start_date,
  ranges_agg.end_date,
  CASE
    WHEN nitrate.date < ranges_agg.start_date THEN 'before'
    WHEN nitrate.date > ranges_agg.end_date THEN 'after'
  END AS segment,
  nitrate.date,
  nitrate.value_std,
  discharge."Flow",
  discharge.quartile,
  counts.before_count,
  counts.after_count
FROM firearea.nitrate
JOIN firearea.discharge
  ON nitrate.usgs_site = discharge.usgs_site
  AND nitrate.date = discharge."Date"
JOIN firearea.ranges_agg
  ON nitrate.usgs_site = ranges_agg.usgs_site
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
JOIN (
  SELECT
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date,
    COUNT(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) AS after_count
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON nitrate.usgs_site = discharge.usgs_site
    AND nitrate.date = discharge."Date"
  JOIN firearea.ranges_agg
    ON nitrate.usgs_site = ranges_agg.usgs_site
  WHERE nitrate.value_std IS NOT NULL
    AND discharge."Flow" IS NOT NULL
    AND discharge.quartile IS NOT NULL
  GROUP BY
    nitrate.usgs_site,
    ranges_agg.year,
    ranges_agg.start_date,
    ranges_agg.end_date
  HAVING
    -- quartile 2, 3, and 4 must be present in before window
    SUM(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date AND discharge.quartile = 2 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date AND discharge.quartile = 3 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date AND discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
    -- quartile 2, 3, and 4 must be present in after window
    AND
    SUM(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') AND discharge.quartile = 2 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') AND discharge.quartile = 3 THEN 1 ELSE 0 END) > 0
    AND
    SUM(CASE WHEN nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years') AND discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
) AS counts
  ON nitrate.usgs_site = counts.usgs_site
  AND ranges_agg.year = counts.year
  AND ranges_agg.start_date = counts.start_date
  AND ranges_agg.end_date = counts.end_date
WHERE nitrate.value_std IS NOT NULL
  AND discharge."Flow" IS NOT NULL
  AND discharge.quartile IS NOT NULL
  AND (
    (nitrate.date >= (ranges_agg.start_date - INTERVAL '3 years') AND nitrate.date < ranges_agg.start_date)
    OR
    (nitrate.date > ranges_agg.end_date AND nitrate.date <= (ranges_agg.end_date + INTERVAL '3 years'))
  )
) TO '/tmp/nitrate_discharge_data_filtered_quartiles_234.csv' WITH CSV HEADER
;

```

## extract: fire-impacted câq data extraction (quartiles + max fire)

purpose:

This query extracts nitrate and discharge observations from USGS watershed
sites surrounding wildfire events. It isolates data for only the largest
valid fire event per watershed, where validity is defined by the presence of
adequate water quality monitoring data before and after the fire.

key objectives:

- Assess hydrologic and water quality response (nitrate + flow) to wildfire
  disturbances.
- Limit analysis to only the most impactful fire per watershed, based on fire
  area (`cum_fire_area`).
- ensure fire events are sufficiently monitored, with:
  - At least 3 years of data before and after the fire.
  - Presence of streamflow across flow quartiles 2, 3, and 4 in both windows.

core logic steps:

1. Join nitrate and discharge records by site and date.
2. Filter for valid data windows:
   - Records must fall within 3 years before or after each fire.
   - Each fire must have discharge records in quartiles 2â4 in both windows.
3. Select valid fires per watershed from `ranges_agg`, ensuring they meet all
data coverage criteria.
4. Identify the largest fire per `usgs_site` by selecting the maximum
`cum_fire_area` among valid events.
5. Return nitrate + discharge records for the selected fire per watershed, with
an additional field (`segment`) labeling records as âbeforeâ or âafterâ the
fire event.

inputs:

- `firearea.nitrate`: View of USGS and non-USGS nitrate observations
- `firearea.discharge`: Daily streamflow and derived quartile classification
- `firearea.ranges_agg`: Pre-aggregated wildfire periods and fire area metrics
  per watershed

outputs:

| column name         | description                                        |
|---------------------|----------------------------------------------------|
| `usgs_site`         | Site identifier                                    |
| `year`              | Fire event year                                    |
| `start_date`        | Fire event start date                              |
| `end_date`          | Fire event end date                                |
| `segment`           | Temporal label: `'before'` or `'after'` fire       |
| `date`              | Nitrate/discharge observation date                 |
| `value_std`         | Standardized nitrate concentration (mg/L as N)     |
| `"Flow"`            | Discharge (cfs)                                    |
| `quartile`          | Discharge flow quartile (1â4)                      |
| `before_count`      | Count of observations in 3 years before the fire   |
| `after_count`       | Count of observations in 3 years after the fire    |

The query result is saved as: `nitrate_discharge_quartiles_234_max_fire.csv`

```{sql}
#| eval: FALSE
#| label: nitrate_q_upper_quartiles_max_fire

\COPY (
SELECT
  firearea.nitrate.usgs_site,
  firearea.largest_nitrate_valid_fire_per_site.year,
  firearea.largest_nitrate_valid_fire_per_site.start_date,
  firearea.largest_nitrate_valid_fire_per_site.end_date,
  CASE
    WHEN firearea.nitrate.date < firearea.largest_nitrate_valid_fire_per_site.start_date THEN 'before'
    WHEN firearea.nitrate.date > firearea.largest_nitrate_valid_fire_per_site.end_date THEN 'after'
  END AS segment,
  firearea.nitrate.date,
  firearea.nitrate.value_std,
  firearea.discharge."Flow",
  firearea.discharge.quartile,
  firearea.largest_nitrate_valid_fire_per_site.before_count,
  firearea.largest_nitrate_valid_fire_per_site.after_count
FROM firearea.nitrate
JOIN firearea.discharge
  ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
  AND firearea.nitrate.date = firearea.discharge."Date"
JOIN firearea.largest_nitrate_valid_fire_per_site
  ON firearea.nitrate.usgs_site = firearea.largest_nitrate_valid_fire_per_site.usgs_site
WHERE firearea.nitrate.value_std IS NOT NULL
  AND firearea.discharge."Flow" IS NOT NULL
  AND firearea.discharge.quartile IS NOT NULL
  AND (
    (firearea.nitrate.date >= (firearea.largest_nitrate_valid_fire_per_site.start_date - INTERVAL '3 years') AND firearea.nitrate.date < firearea.largest_nitrate_valid_fire_per_site.start_date)
    OR
    (firearea.nitrate.date > firearea.largest_nitrate_valid_fire_per_site.end_date AND firearea.nitrate.date <= (firearea.largest_nitrate_valid_fire_per_site.end_date + INTERVAL '3 years'))
  )
) TO '/tmp/nitrate_discharge_quartiles_234_max_fire.csv' WITH CSV HEADER
;

```

## extract: discharge at nitrate sites

purpose:

This query retrieves all discharge observations for USGS watershed sites
(`usgs_site`) that have been validated for nitrate-based wildfire impact
analysis. These sites are selected based on the presence of both sufficient
nitrate-discharge monitoring and a clearly defined wildfire event.

context:

- This query relies on the `firearea.largest_nitrate_valid_fire_per_site`
  materialized view, which filters and identifies one largest valid fire per
  watershed.
- "Valid" fires are those for which nitrate and flow data span at least 3 years
  pre- and post-fire, and include representation across flow quartiles 2, 3,
  and 4 in both periods.

query logic:

1. Extract the list of `usgs_site` values from the validated nitrate-fire
   materialized view.
2. Select all discharge records from `firearea.discharge` where the site
   matches one of the validated sites.

input tables:

- `firearea.discharge`: Raw discharge records for all USGS sites, including
  date, flow volume, and quartile.
- `firearea.largest_nitrate_valid_fire_per_site`: Materialized view of
  validated fire events based on nitrateâdischarge data quality.

output columns:

| Column Name  | Description                              |
|--------------|------------------------------------------|
| `usgs_site`  | USGS watershed identifier                |
| `"Date"`     | Date of discharge observation            |
| `"Flow"`     | Flow volume (cubic feet per second)      |
| `"Flow_cd"`  | Qualifier code for flow measurement      |
| `quartile`   | Flow percentile category (1â4)           |


```{sql}
#| eval: TRUE
#| label: nitrate_sites_discharge


\COPY (
SELECT *
FROM firearea.discharge
WHERE usgs_site IN (
  SELECT usgs_site
  FROM firearea.largest_nitrate_valid_fire_per_site
)
) TO '/tmp/nitrate_sites_discharge.csv' WITH CSV HEADER
;

```

## extract: fires at nitrate sites

purpose:

This query retrieves comprehensive fire event information for each watershed
(`usgs_site`) based on the largest wildfire event that also meets
nitrate-discharge data sufficiency criteria. It ensures that only those events
selected for water quality analysis are described in detail using the
`ranges_agg` view.

context:

- The `ranges_agg` view aggregates fire events by watershed and year,
  summarizing burn area, duration, spatial extent, and event IDs.
- The companion materialized view
  `firearea.largest_nitrate_valid_fire_per_site` filters these to a single,
  largest valid fire per watershed with adequate nitrate and discharge
  monitoring.
- This query joins the two views on `usgs_site`, `start_date`, and `end_date`
  to return only the selected fire events.

query logic:

1. Pull all rows from `firearea.ranges_agg`, which includes fire grouping
   metadata per site.
2. Filter the results to only the fire windows (start + end dates) identified
   in the nitrate validation materialized view.
3. Return the entire record for each matched fire.

input tables:

- `firearea.ranges_agg`: View of grouped and summarized fire events by site.
- `firearea.largest_nitrate_valid_fire_per_site`: Materialized view of sites
  with validated nitrate+discharge data coverage.

output columns

| column name            | description                                         |
|------------------------|-----------------------------------------------------|
| `usgs_site`            | Watershed site identifier                           |
| `year`                 | Fire grouping year                                  |
| `start_date`, `end_date` | Boundaries of the fire group window              |
| `events`               | Array of associated fire `event_id`s                |
| `cum_fire_area`        | Cumulative burned area (kmÂ²)                        |
| `cum_per_cent_burned`  | % of watershed burned                               |
| `catch_area`           | Catchment area (kmÂ²)                                |
| `latitude`, `longitude`| Centroid coordinates of the watershed               |
| `days_since`, `days_until` | Temporal spacing between fire windows           |


```{sql}
#| eval: TRUE
#| label: nitrate_sites_fires

\COPY (
SELECT
  firearea.ranges_agg.*
FROM firearea.ranges_agg
JOIN firearea.largest_nitrate_valid_fire_per_site
  ON firearea.ranges_agg.usgs_site   = firearea.largest_nitrate_valid_fire_per_site.usgs_site
  AND firearea.ranges_agg.start_date = firearea.largest_nitrate_valid_fire_per_site.start_date
  AND firearea.ranges_agg.end_date   = firearea.largest_nitrate_valid_fire_per_site.end_date
) TO '/tmp/nitrate_sites_fires.csv' WITH CSV HEADER
;

```

## extract: fire-impacted câq data extraction (pre-fire quartiles + max fire)

purpose:

This query retrieves nitrate and discharge records for USGS watershed sites
(`usgs_site`) surrounding wildfire events. It ensures strong sampling coverage
before the fire, requiring observations in flow quartiles 2, 3, and 4, while
placing no constraint on post-fire sampling coverage.

**It is important to note that the results of this query are NOT a superset of
the results of the query where we are also constraining the post-fire values to
having representative values from quartiles 2, 3, and 4. The reason is that
largest fire for a given site is not necessarily the same across the two
queries.

For example, the largest fire in catchment USGS-06259000 occurred on
2011-07-22 when both before and after fire windows must contain quartiles 2, 3,
and 4 but on 2021-08-19 when only the pre-fire data needed to reflect values in
quartiles 2, 3, and 4.**

Note that we are not using these results for analyses but serves as the base
for subsequent queries to pull discharge and fire details for the sites.

context:

- This approach enables inclusion of fire events where post-fire data may be
  sparse, but pre-disturbance flow conditions are well characterized.
- It is ideal for analyses focused on establishing a robust pre-fire baseline
  for nitrate concentrations.

query logic:

1. Join `firearea.nitrate`, `firearea.discharge`, and `firearea.ranges_agg`.
2. Identify all fire windows per site (`usgs_site`) and evaluate 3-year
sampling windows:
   - Pre-fire window must contain observations in flow quartiles 2, 3, and 4.
   Post-fire window is included regardless of flow distribution.
3. From qualifying fire windows, select the largest fire event per site using
`cum_fire_area DESC`.
4. Return nitrateâdischarge samples from the 3-year pre- and post-fire windows,
with labeled segment (`'before'` or `'after'`).

input tables:

- `firearea.nitrate`: Standardized nitrate observations by site and date.
- `firearea.discharge`: Discharge flow volume and quartile per site and date.
- `firearea.ranges_agg`: Aggregated fire events per site, with timing and
  spatial metrics.

output columns:

| Column Name       | Description                                         |
|-------------------|-----------------------------------------------------|
| `usgs_site`       | Watershed site identifier                           |
| `year`            | Year of the fire event group                        |
| `start_date`      | Start of fire window                                |
| `end_date`        | End of fire window                                  |
| `segment`         | `'before'` or `'after'` the fire event              |
| `date`            | Observation date                                    |
| `value_std`       | Standardized nitrate concentration (mg/L as N)      |
| `"Flow"`          | Discharge volume (cfs)                              |
| `quartile`        | Flow quartile category (1â4)                        |
| `before_count`    | Total records in pre-fire window                    |
| `after_count`     | Total records in post-fire window                   |

```{sql}
#| eval: TRUE
#| label: nitrate_q_before_upper_quartiles_max_fire

\COPY (
WITH fire_with_data AS (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area,
    COUNT(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
               AND firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) AS before_count,
    COUNT(CASE WHEN firearea.nitrate.date > firearea.ranges_agg.end_date
               AND firearea.nitrate.date <= (firearea.ranges_agg.end_date + INTERVAL '3 years') THEN 1 END) AS after_count,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) AS bq2,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) AS bq3,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) AS bq4
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
    AND firearea.discharge.quartile IS NOT NULL
  GROUP BY
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.year,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area
  HAVING
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
)
SELECT
  firearea.nitrate.usgs_site,
  fire_with_data.year,
  fire_with_data.start_date,
  fire_with_data.end_date,
  CASE
    WHEN firearea.nitrate.date < fire_with_data.start_date THEN 'before'
    WHEN firearea.nitrate.date > fire_with_data.end_date THEN 'after'
  END AS segment,
  firearea.nitrate.date,
  firearea.nitrate.value_std,
  firearea.discharge."Flow",
  firearea.discharge.quartile,
  fire_with_data.before_count,
  fire_with_data.after_count
FROM firearea.nitrate
JOIN firearea.discharge
  ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
  AND firearea.nitrate.date = firearea.discharge."Date"
JOIN (
  SELECT DISTINCT ON (fire_with_data.usgs_site)
    fire_with_data.usgs_site,
    fire_with_data.year,
    fire_with_data.start_date,
    fire_with_data.end_date,
    fire_with_data.before_count,
    fire_with_data.after_count
  FROM fire_with_data
  ORDER BY fire_with_data.usgs_site, fire_with_data.cum_fire_area DESC
) AS fire_with_data
  ON firearea.nitrate.usgs_site = fire_with_data.usgs_site
WHERE firearea.nitrate.value_std IS NOT NULL
  AND firearea.discharge."Flow" IS NOT NULL
  AND firearea.discharge.quartile IS NOT NULL
  AND (
    (firearea.nitrate.date >= (fire_with_data.start_date - INTERVAL '3 years') AND firearea.nitrate.date < fire_with_data.start_date)
    OR
    (firearea.nitrate.date > fire_with_data.end_date AND firearea.nitrate.date <= (fire_with_data.end_date + INTERVAL '3 years'))
  )
) TO '/tmp/nitrate_discharge_before_quartiles_234_max_fire.csv' WITH CSV HEADER
;

```

## extract: discharge at nitrate sites (pre quartiles only)

Metadata are identical to `## extract: discharge at nitrate sites` except that
only pre-fire (i.e., not post-fire) values must reflect values in quartiles 2,
3, and 4. There are not any constraints on post-fire values except that they
are within 3 years post fire.

```{sql}
#| eval: TRUE
#| label: nitrate_sites_discharge_pre_quartiles

\COPY (
WITH fire_with_data AS (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area,
    COUNT(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
               AND firearea.nitrate.date < firearea.ranges_agg.start_date THEN 1 END) AS before_count,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) AS bq2,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) AS bq3,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) AS bq4
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
    AND firearea.discharge.quartile IS NOT NULL
  GROUP BY
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area
  HAVING
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
)
SELECT *
FROM firearea.discharge
WHERE firearea.discharge.usgs_site IN (
  SELECT DISTINCT ON (fire_with_data.usgs_site)
    fire_with_data.usgs_site
  FROM fire_with_data
  ORDER BY fire_with_data.usgs_site, fire_with_data.cum_fire_area DESC
)
) TO '/tmp/nitrate_sites_discharge_pre_quartiles.csv' WITH CSV HEADER
;

```

## extract: fires at nitrate sites (pre quartiles only)

Metadata are identical to `## extract: fires at nitrate sites` except that
only pre-fire (i.e., not post-fire) values must reflect values in quartiles 2,
3, and 4. There are not any constraints on post-fire values except that they
are within 3 years post fire.

```{sql}
#| eval: TRUE
#| label: nitrate_sites_fires_pre_quartiles

\COPY (
WITH fire_with_data AS (
  SELECT
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
             AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) AS bq2,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
             AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) AS bq3,
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
             AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) AS bq4
  FROM firearea.nitrate
  JOIN firearea.discharge
    ON firearea.nitrate.usgs_site = firearea.discharge.usgs_site
    AND firearea.nitrate.date = firearea.discharge."Date"
  JOIN firearea.ranges_agg
    ON firearea.nitrate.usgs_site = firearea.ranges_agg.usgs_site
  WHERE firearea.nitrate.value_std IS NOT NULL
    AND firearea.discharge."Flow" IS NOT NULL
    AND firearea.discharge.quartile IS NOT NULL
  GROUP BY
    firearea.nitrate.usgs_site,
    firearea.ranges_agg.start_date,
    firearea.ranges_agg.end_date,
    firearea.ranges_agg.cum_fire_area
  HAVING
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 2 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 3 THEN 1 ELSE 0 END) > 0 AND
    SUM(CASE WHEN firearea.nitrate.date >= (firearea.ranges_agg.start_date - INTERVAL '3 years')
              AND firearea.nitrate.date < firearea.ranges_agg.start_date AND firearea.discharge.quartile = 4 THEN 1 ELSE 0 END) > 0
)
SELECT firearea.ranges_agg.*
FROM firearea.ranges_agg
JOIN (
  SELECT DISTINCT ON (fire_with_data.usgs_site)
    fire_with_data.usgs_site,
    fire_with_data.start_date,
    fire_with_data.end_date
  FROM fire_with_data
  ORDER BY fire_with_data.usgs_site, fire_with_data.cum_fire_area DESC
) AS filtered_fire
  ON firearea.ranges_agg.usgs_site = filtered_fire.usgs_site
  AND firearea.ranges_agg.start_date = filtered_fire.start_date
  AND firearea.ranges_agg.end_date = filtered_fire.end_date
) TO '/tmp/nitrate_sites_fires_pre_quartiles.csv' WITH CSV HEADER
;

```

